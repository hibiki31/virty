/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TaskPagesnation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskPagesnation{}

// TaskPagesnation struct for TaskPagesnation
type TaskPagesnation struct {
	Count int32 `json:"count"`
	Data []Task `json:"data"`
}

type _TaskPagesnation TaskPagesnation

// NewTaskPagesnation instantiates a new TaskPagesnation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskPagesnation(count int32, data []Task) *TaskPagesnation {
	this := TaskPagesnation{}
	this.Count = count
	this.Data = data
	return &this
}

// NewTaskPagesnationWithDefaults instantiates a new TaskPagesnation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskPagesnationWithDefaults() *TaskPagesnation {
	this := TaskPagesnation{}
	return &this
}

// GetCount returns the Count field value
func (o *TaskPagesnation) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TaskPagesnation) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TaskPagesnation) SetCount(v int32) {
	o.Count = v
}

// GetData returns the Data field value
func (o *TaskPagesnation) GetData() []Task {
	if o == nil {
		var ret []Task
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TaskPagesnation) GetDataOk() ([]Task, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *TaskPagesnation) SetData(v []Task) {
	o.Data = v
}

func (o TaskPagesnation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskPagesnation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *TaskPagesnation) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskPagesnation := _TaskPagesnation{}

	err = json.Unmarshal(bytes, &varTaskPagesnation)

	if err != nil {
		return err
	}

	*o = TaskPagesnation(varTaskPagesnation)

	return err
}

type NullableTaskPagesnation struct {
	value *TaskPagesnation
	isSet bool
}

func (v NullableTaskPagesnation) Get() *TaskPagesnation {
	return v.value
}

func (v *NullableTaskPagesnation) Set(val *TaskPagesnation) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskPagesnation) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskPagesnation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskPagesnation(val *TaskPagesnation) *NullableTaskPagesnation {
	return &NullableTaskPagesnation{value: val, isSet: true}
}

func (v NullableTaskPagesnation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskPagesnation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


