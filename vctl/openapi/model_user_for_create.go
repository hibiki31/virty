/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserForCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserForCreate{}

// UserForCreate struct for UserForCreate
type UserForCreate struct {
	UserId string `json:"userId"`
	Password string `json:"password"`
}

type _UserForCreate UserForCreate

// NewUserForCreate instantiates a new UserForCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserForCreate(userId string, password string) *UserForCreate {
	this := UserForCreate{}
	this.UserId = userId
	this.Password = password
	return &this
}

// NewUserForCreateWithDefaults instantiates a new UserForCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserForCreateWithDefaults() *UserForCreate {
	this := UserForCreate{}
	return &this
}

// GetUserId returns the UserId field value
func (o *UserForCreate) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserForCreate) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserForCreate) SetUserId(v string) {
	o.UserId = v
}

// GetPassword returns the Password field value
func (o *UserForCreate) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserForCreate) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserForCreate) SetPassword(v string) {
	o.Password = v
}

func (o UserForCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserForCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *UserForCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserForCreate := _UserForCreate{}

	err = json.Unmarshal(bytes, &varUserForCreate)

	if err != nil {
		return err
	}

	*o = UserForCreate(varUserForCreate)

	return err
}

type NullableUserForCreate struct {
	value *UserForCreate
	isSet bool
}

func (v NullableUserForCreate) Get() *UserForCreate {
	return v.value
}

func (v *NullableUserForCreate) Set(val *UserForCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserForCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserForCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserForCreate(val *UserForCreate) *NullableUserForCreate {
	return &NullableUserForCreate{value: val, isSet: true}
}

func (v NullableUserForCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserForCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


