/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkPoolPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkPoolPort{}

// NetworkPoolPort struct for NetworkPoolPort
type NetworkPoolPort struct {
	Name *string `json:"name,omitempty"`
	VlanId *int32 `json:"vlanId,omitempty"`
	Network NetworkForNetworkPool `json:"network"`
}

type _NetworkPoolPort NetworkPoolPort

// NewNetworkPoolPort instantiates a new NetworkPoolPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPoolPort(network NetworkForNetworkPool) *NetworkPoolPort {
	this := NetworkPoolPort{}
	this.Network = network
	return &this
}

// NewNetworkPoolPortWithDefaults instantiates a new NetworkPoolPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPoolPortWithDefaults() *NetworkPoolPort {
	this := NetworkPoolPort{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkPoolPort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolPort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkPoolPort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkPoolPort) SetName(v string) {
	o.Name = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *NetworkPoolPort) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolPort) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *NetworkPoolPort) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *NetworkPoolPort) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetNetwork returns the Network field value
func (o *NetworkPoolPort) GetNetwork() NetworkForNetworkPool {
	if o == nil {
		var ret NetworkForNetworkPool
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *NetworkPoolPort) GetNetworkOk() (*NetworkForNetworkPool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *NetworkPoolPort) SetNetwork(v NetworkForNetworkPool) {
	o.Network = v
}

func (o NetworkPoolPort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkPoolPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlanId"] = o.VlanId
	}
	toSerialize["network"] = o.Network
	return toSerialize, nil
}

func (o *NetworkPoolPort) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkPoolPort := _NetworkPoolPort{}

	err = json.Unmarshal(bytes, &varNetworkPoolPort)

	if err != nil {
		return err
	}

	*o = NetworkPoolPort(varNetworkPoolPort)

	return err
}

type NullableNetworkPoolPort struct {
	value *NetworkPoolPort
	isSet bool
}

func (v NullableNetworkPoolPort) Get() *NetworkPoolPort {
	return v.value
}

func (v *NullableNetworkPoolPort) Set(val *NetworkPoolPort) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPoolPort) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPoolPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPoolPort(val *NetworkPoolPort) *NullableNetworkPoolPort {
	return &NullableNetworkPoolPort{value: val, isSet: true}
}

func (v NullableNetworkPoolPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPoolPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


