/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectForCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectForCreate{}

// ProjectForCreate struct for ProjectForCreate
type ProjectForCreate struct {
	ProjectName string `json:"projectName"`
	UserIds []string `json:"userIds"`
}

type _ProjectForCreate ProjectForCreate

// NewProjectForCreate instantiates a new ProjectForCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectForCreate(projectName string, userIds []string) *ProjectForCreate {
	this := ProjectForCreate{}
	this.ProjectName = projectName
	this.UserIds = userIds
	return &this
}

// NewProjectForCreateWithDefaults instantiates a new ProjectForCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectForCreateWithDefaults() *ProjectForCreate {
	this := ProjectForCreate{}
	return &this
}

// GetProjectName returns the ProjectName field value
func (o *ProjectForCreate) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ProjectForCreate) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ProjectForCreate) SetProjectName(v string) {
	o.ProjectName = v
}

// GetUserIds returns the UserIds field value
func (o *ProjectForCreate) GetUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value
// and a boolean to check if the value has been set.
func (o *ProjectForCreate) GetUserIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIds, true
}

// SetUserIds sets field value
func (o *ProjectForCreate) SetUserIds(v []string) {
	o.UserIds = v
}

func (o ProjectForCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectForCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectName"] = o.ProjectName
	toSerialize["userIds"] = o.UserIds
	return toSerialize, nil
}

func (o *ProjectForCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectName",
		"userIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectForCreate := _ProjectForCreate{}

	err = json.Unmarshal(bytes, &varProjectForCreate)

	if err != nil {
		return err
	}

	*o = ProjectForCreate(varProjectForCreate)

	return err
}

type NullableProjectForCreate struct {
	value *ProjectForCreate
	isSet bool
}

func (v NullableProjectForCreate) Get() *ProjectForCreate {
	return v.value
}

func (v *NullableProjectForCreate) Set(val *ProjectForCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectForCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectForCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectForCreate(val *ProjectForCreate) *NullableProjectForCreate {
	return &NullableProjectForCreate{value: val, isSet: true}
}

func (v NullableProjectForCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectForCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


