/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DomainForCreateInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainForCreateInterface{}

// DomainForCreateInterface struct for DomainForCreateInterface
type DomainForCreateInterface struct {
	Type string `json:"type"`
	Mac *string `json:"mac,omitempty"`
	NetworkUuid string `json:"networkUuid"`
	Port *string `json:"port,omitempty"`
}

type _DomainForCreateInterface DomainForCreateInterface

// NewDomainForCreateInterface instantiates a new DomainForCreateInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainForCreateInterface(type_ string, networkUuid string) *DomainForCreateInterface {
	this := DomainForCreateInterface{}
	this.Type = type_
	this.NetworkUuid = networkUuid
	return &this
}

// NewDomainForCreateInterfaceWithDefaults instantiates a new DomainForCreateInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainForCreateInterfaceWithDefaults() *DomainForCreateInterface {
	this := DomainForCreateInterface{}
	return &this
}

// GetType returns the Type field value
func (o *DomainForCreateInterface) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DomainForCreateInterface) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DomainForCreateInterface) SetType(v string) {
	o.Type = v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *DomainForCreateInterface) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateInterface) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *DomainForCreateInterface) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *DomainForCreateInterface) SetMac(v string) {
	o.Mac = &v
}

// GetNetworkUuid returns the NetworkUuid field value
func (o *DomainForCreateInterface) GetNetworkUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkUuid
}

// GetNetworkUuidOk returns a tuple with the NetworkUuid field value
// and a boolean to check if the value has been set.
func (o *DomainForCreateInterface) GetNetworkUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkUuid, true
}

// SetNetworkUuid sets field value
func (o *DomainForCreateInterface) SetNetworkUuid(v string) {
	o.NetworkUuid = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DomainForCreateInterface) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateInterface) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DomainForCreateInterface) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *DomainForCreateInterface) SetPort(v string) {
	o.Port = &v
}

func (o DomainForCreateInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainForCreateInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	toSerialize["networkUuid"] = o.NetworkUuid
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

func (o *DomainForCreateInterface) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"networkUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainForCreateInterface := _DomainForCreateInterface{}

	err = json.Unmarshal(bytes, &varDomainForCreateInterface)

	if err != nil {
		return err
	}

	*o = DomainForCreateInterface(varDomainForCreateInterface)

	return err
}

type NullableDomainForCreateInterface struct {
	value *DomainForCreateInterface
	isSet bool
}

func (v NullableDomainForCreateInterface) Get() *DomainForCreateInterface {
	return v.value
}

func (v *NullableDomainForCreateInterface) Set(val *DomainForCreateInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainForCreateInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainForCreateInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainForCreateInterface(val *DomainForCreateInterface) *NullableDomainForCreateInterface {
	return &NullableDomainForCreateInterface{value: val, isSet: true}
}

func (v NullableDomainForCreateInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainForCreateInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


