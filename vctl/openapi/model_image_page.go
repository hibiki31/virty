/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImagePage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImagePage{}

// ImagePage struct for ImagePage
type ImagePage struct {
	Name string `json:"name"`
	StorageUuid *string `json:"storageUuid,omitempty"`
	Capacity int32 `json:"capacity"`
	Storage StoragePage `json:"storage"`
	Flavor *Flavor `json:"flavor,omitempty"`
	Allocation int32 `json:"allocation"`
	Path string `json:"path"`
	UpdateToken *string `json:"updateToken,omitempty"`
	Domain *ImageDomain `json:"domain,omitempty"`
}

type _ImagePage ImagePage

// NewImagePage instantiates a new ImagePage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImagePage(name string, capacity int32, storage StoragePage, allocation int32, path string) *ImagePage {
	this := ImagePage{}
	this.Name = name
	this.Capacity = capacity
	this.Storage = storage
	this.Allocation = allocation
	this.Path = path
	return &this
}

// NewImagePageWithDefaults instantiates a new ImagePage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagePageWithDefaults() *ImagePage {
	this := ImagePage{}
	return &this
}

// GetName returns the Name field value
func (o *ImagePage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImagePage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImagePage) SetName(v string) {
	o.Name = v
}

// GetStorageUuid returns the StorageUuid field value if set, zero value otherwise.
func (o *ImagePage) GetStorageUuid() string {
	if o == nil || IsNil(o.StorageUuid) {
		var ret string
		return ret
	}
	return *o.StorageUuid
}

// GetStorageUuidOk returns a tuple with the StorageUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePage) GetStorageUuidOk() (*string, bool) {
	if o == nil || IsNil(o.StorageUuid) {
		return nil, false
	}
	return o.StorageUuid, true
}

// HasStorageUuid returns a boolean if a field has been set.
func (o *ImagePage) HasStorageUuid() bool {
	if o != nil && !IsNil(o.StorageUuid) {
		return true
	}

	return false
}

// SetStorageUuid gets a reference to the given string and assigns it to the StorageUuid field.
func (o *ImagePage) SetStorageUuid(v string) {
	o.StorageUuid = &v
}

// GetCapacity returns the Capacity field value
func (o *ImagePage) GetCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *ImagePage) GetCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *ImagePage) SetCapacity(v int32) {
	o.Capacity = v
}

// GetStorage returns the Storage field value
func (o *ImagePage) GetStorage() StoragePage {
	if o == nil {
		var ret StoragePage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *ImagePage) GetStorageOk() (*StoragePage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *ImagePage) SetStorage(v StoragePage) {
	o.Storage = v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *ImagePage) GetFlavor() Flavor {
	if o == nil || IsNil(o.Flavor) {
		var ret Flavor
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePage) GetFlavorOk() (*Flavor, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *ImagePage) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given Flavor and assigns it to the Flavor field.
func (o *ImagePage) SetFlavor(v Flavor) {
	o.Flavor = &v
}

// GetAllocation returns the Allocation field value
func (o *ImagePage) GetAllocation() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value
// and a boolean to check if the value has been set.
func (o *ImagePage) GetAllocationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allocation, true
}

// SetAllocation sets field value
func (o *ImagePage) SetAllocation(v int32) {
	o.Allocation = v
}

// GetPath returns the Path field value
func (o *ImagePage) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ImagePage) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ImagePage) SetPath(v string) {
	o.Path = v
}

// GetUpdateToken returns the UpdateToken field value if set, zero value otherwise.
func (o *ImagePage) GetUpdateToken() string {
	if o == nil || IsNil(o.UpdateToken) {
		var ret string
		return ret
	}
	return *o.UpdateToken
}

// GetUpdateTokenOk returns a tuple with the UpdateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePage) GetUpdateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateToken) {
		return nil, false
	}
	return o.UpdateToken, true
}

// HasUpdateToken returns a boolean if a field has been set.
func (o *ImagePage) HasUpdateToken() bool {
	if o != nil && !IsNil(o.UpdateToken) {
		return true
	}

	return false
}

// SetUpdateToken gets a reference to the given string and assigns it to the UpdateToken field.
func (o *ImagePage) SetUpdateToken(v string) {
	o.UpdateToken = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ImagePage) GetDomain() ImageDomain {
	if o == nil || IsNil(o.Domain) {
		var ret ImageDomain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePage) GetDomainOk() (*ImageDomain, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ImagePage) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given ImageDomain and assigns it to the Domain field.
func (o *ImagePage) SetDomain(v ImageDomain) {
	o.Domain = &v
}

func (o ImagePage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImagePage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.StorageUuid) {
		toSerialize["storageUuid"] = o.StorageUuid
	}
	toSerialize["capacity"] = o.Capacity
	toSerialize["storage"] = o.Storage
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	toSerialize["allocation"] = o.Allocation
	toSerialize["path"] = o.Path
	if !IsNil(o.UpdateToken) {
		toSerialize["updateToken"] = o.UpdateToken
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	return toSerialize, nil
}

func (o *ImagePage) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"capacity",
		"storage",
		"allocation",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImagePage := _ImagePage{}

	err = json.Unmarshal(bytes, &varImagePage)

	if err != nil {
		return err
	}

	*o = ImagePage(varImagePage)

	return err
}

type NullableImagePage struct {
	value *ImagePage
	isSet bool
}

func (v NullableImagePage) Get() *ImagePage {
	return v.value
}

func (v *NullableImagePage) Set(val *ImagePage) {
	v.value = val
	v.isSet = true
}

func (v NullableImagePage) IsSet() bool {
	return v.isSet
}

func (v *NullableImagePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImagePage(val *ImagePage) *NullableImagePage {
	return &NullableImagePage{value: val, isSet: true}
}

func (v NullableImagePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImagePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


