/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StoragePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePool{}

// StoragePool struct for StoragePool
type StoragePool struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Storages []StorageContainerForStoragePool `json:"storages"`
}

type _StoragePool StoragePool

// NewStoragePool instantiates a new StoragePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePool(id int32, name string, storages []StorageContainerForStoragePool) *StoragePool {
	this := StoragePool{}
	this.Id = id
	this.Name = name
	this.Storages = storages
	return &this
}

// NewStoragePoolWithDefaults instantiates a new StoragePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePoolWithDefaults() *StoragePool {
	this := StoragePool{}
	return &this
}

// GetId returns the Id field value
func (o *StoragePool) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StoragePool) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *StoragePool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StoragePool) SetName(v string) {
	o.Name = v
}

// GetStorages returns the Storages field value
func (o *StoragePool) GetStorages() []StorageContainerForStoragePool {
	if o == nil {
		var ret []StorageContainerForStoragePool
		return ret
	}

	return o.Storages
}

// GetStoragesOk returns a tuple with the Storages field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetStoragesOk() ([]StorageContainerForStoragePool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storages, true
}

// SetStorages sets field value
func (o *StoragePool) SetStorages(v []StorageContainerForStoragePool) {
	o.Storages = v
}

func (o StoragePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["storages"] = o.Storages
	return toSerialize, nil
}

func (o *StoragePool) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"storages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePool := _StoragePool{}

	err = json.Unmarshal(bytes, &varStoragePool)

	if err != nil {
		return err
	}

	*o = StoragePool(varStoragePool)

	return err
}

type NullableStoragePool struct {
	value *StoragePool
	isSet bool
}

func (v NullableStoragePool) Get() *StoragePool {
	return v.value
}

func (v *NullableStoragePool) Set(val *StoragePool) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePool) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePool(val *StoragePool) *NullableStoragePool {
	return &NullableStoragePool{value: val, isSet: true}
}

func (v NullableStoragePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


