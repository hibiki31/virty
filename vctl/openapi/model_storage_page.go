/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StoragePage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePage{}

// StoragePage struct for StoragePage
type StoragePage struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
	Status int32 `json:"status"`
	Active bool `json:"active"`
	Available *int32 `json:"available,omitempty"`
	Capacity *int32 `json:"capacity,omitempty"`
	NodeName string `json:"nodeName"`
	Node NodePage `json:"node"`
	AutoStart bool `json:"autoStart"`
	Path *string `json:"path,omitempty"`
	MetaData *StorageMetadata `json:"metaData,omitempty"`
	UpdateToken *string `json:"updateToken,omitempty"`
	AllocationCommit *int32 `json:"allocationCommit,omitempty"`
	CapacityCommit *int32 `json:"capacityCommit,omitempty"`
}

type _StoragePage StoragePage

// NewStoragePage instantiates a new StoragePage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePage(name string, uuid string, status int32, active bool, nodeName string, node NodePage, autoStart bool) *StoragePage {
	this := StoragePage{}
	this.Name = name
	this.Uuid = uuid
	this.Status = status
	this.Active = active
	this.NodeName = nodeName
	this.Node = node
	this.AutoStart = autoStart
	return &this
}

// NewStoragePageWithDefaults instantiates a new StoragePage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePageWithDefaults() *StoragePage {
	this := StoragePage{}
	return &this
}

// GetName returns the Name field value
func (o *StoragePage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StoragePage) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *StoragePage) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *StoragePage) SetUuid(v string) {
	o.Uuid = v
}

// GetStatus returns the Status field value
func (o *StoragePage) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *StoragePage) SetStatus(v int32) {
	o.Status = v
}

// GetActive returns the Active field value
func (o *StoragePage) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *StoragePage) SetActive(v bool) {
	o.Active = v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *StoragePage) GetAvailable() int32 {
	if o == nil || IsNil(o.Available) {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *StoragePage) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *StoragePage) SetAvailable(v int32) {
	o.Available = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *StoragePage) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *StoragePage) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *StoragePage) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetNodeName returns the NodeName field value
func (o *StoragePage) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *StoragePage) SetNodeName(v string) {
	o.NodeName = v
}

// GetNode returns the Node field value
func (o *StoragePage) GetNode() NodePage {
	if o == nil {
		var ret NodePage
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetNodeOk() (*NodePage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *StoragePage) SetNode(v NodePage) {
	o.Node = v
}

// GetAutoStart returns the AutoStart field value
func (o *StoragePage) GetAutoStart() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoStart
}

// GetAutoStartOk returns a tuple with the AutoStart field value
// and a boolean to check if the value has been set.
func (o *StoragePage) GetAutoStartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoStart, true
}

// SetAutoStart sets field value
func (o *StoragePage) SetAutoStart(v bool) {
	o.AutoStart = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StoragePage) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StoragePage) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StoragePage) SetPath(v string) {
	o.Path = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *StoragePage) GetMetaData() StorageMetadata {
	if o == nil || IsNil(o.MetaData) {
		var ret StorageMetadata
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetMetaDataOk() (*StorageMetadata, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *StoragePage) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given StorageMetadata and assigns it to the MetaData field.
func (o *StoragePage) SetMetaData(v StorageMetadata) {
	o.MetaData = &v
}

// GetUpdateToken returns the UpdateToken field value if set, zero value otherwise.
func (o *StoragePage) GetUpdateToken() string {
	if o == nil || IsNil(o.UpdateToken) {
		var ret string
		return ret
	}
	return *o.UpdateToken
}

// GetUpdateTokenOk returns a tuple with the UpdateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetUpdateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateToken) {
		return nil, false
	}
	return o.UpdateToken, true
}

// HasUpdateToken returns a boolean if a field has been set.
func (o *StoragePage) HasUpdateToken() bool {
	if o != nil && !IsNil(o.UpdateToken) {
		return true
	}

	return false
}

// SetUpdateToken gets a reference to the given string and assigns it to the UpdateToken field.
func (o *StoragePage) SetUpdateToken(v string) {
	o.UpdateToken = &v
}

// GetAllocationCommit returns the AllocationCommit field value if set, zero value otherwise.
func (o *StoragePage) GetAllocationCommit() int32 {
	if o == nil || IsNil(o.AllocationCommit) {
		var ret int32
		return ret
	}
	return *o.AllocationCommit
}

// GetAllocationCommitOk returns a tuple with the AllocationCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetAllocationCommitOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocationCommit) {
		return nil, false
	}
	return o.AllocationCommit, true
}

// HasAllocationCommit returns a boolean if a field has been set.
func (o *StoragePage) HasAllocationCommit() bool {
	if o != nil && !IsNil(o.AllocationCommit) {
		return true
	}

	return false
}

// SetAllocationCommit gets a reference to the given int32 and assigns it to the AllocationCommit field.
func (o *StoragePage) SetAllocationCommit(v int32) {
	o.AllocationCommit = &v
}

// GetCapacityCommit returns the CapacityCommit field value if set, zero value otherwise.
func (o *StoragePage) GetCapacityCommit() int32 {
	if o == nil || IsNil(o.CapacityCommit) {
		var ret int32
		return ret
	}
	return *o.CapacityCommit
}

// GetCapacityCommitOk returns a tuple with the CapacityCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePage) GetCapacityCommitOk() (*int32, bool) {
	if o == nil || IsNil(o.CapacityCommit) {
		return nil, false
	}
	return o.CapacityCommit, true
}

// HasCapacityCommit returns a boolean if a field has been set.
func (o *StoragePage) HasCapacityCommit() bool {
	if o != nil && !IsNil(o.CapacityCommit) {
		return true
	}

	return false
}

// SetCapacityCommit gets a reference to the given int32 and assigns it to the CapacityCommit field.
func (o *StoragePage) SetCapacityCommit(v int32) {
	o.CapacityCommit = &v
}

func (o StoragePage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	toSerialize["status"] = o.Status
	toSerialize["active"] = o.Active
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	toSerialize["nodeName"] = o.NodeName
	toSerialize["node"] = o.Node
	toSerialize["autoStart"] = o.AutoStart
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	if !IsNil(o.UpdateToken) {
		toSerialize["updateToken"] = o.UpdateToken
	}
	if !IsNil(o.AllocationCommit) {
		toSerialize["allocationCommit"] = o.AllocationCommit
	}
	if !IsNil(o.CapacityCommit) {
		toSerialize["capacityCommit"] = o.CapacityCommit
	}
	return toSerialize, nil
}

func (o *StoragePage) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
		"status",
		"active",
		"nodeName",
		"node",
		"autoStart",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePage := _StoragePage{}

	err = json.Unmarshal(bytes, &varStoragePage)

	if err != nil {
		return err
	}

	*o = StoragePage(varStoragePage)

	return err
}

type NullableStoragePage struct {
	value *StoragePage
	isSet bool
}

func (v NullableStoragePage) Get() *StoragePage {
	return v.value
}

func (v *NullableStoragePage) Set(val *StoragePage) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePage) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePage(val *StoragePage) *NullableStoragePage {
	return &NullableStoragePage{value: val, isSet: true}
}

func (v NullableStoragePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


