/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageForCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageForCreate{}

// StorageForCreate struct for StorageForCreate
type StorageForCreate struct {
	Name string `json:"name"`
	NodeName string `json:"nodeName"`
	Path string `json:"path"`
}

type _StorageForCreate StorageForCreate

// NewStorageForCreate instantiates a new StorageForCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageForCreate(name string, nodeName string, path string) *StorageForCreate {
	this := StorageForCreate{}
	this.Name = name
	this.NodeName = nodeName
	this.Path = path
	return &this
}

// NewStorageForCreateWithDefaults instantiates a new StorageForCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageForCreateWithDefaults() *StorageForCreate {
	this := StorageForCreate{}
	return &this
}

// GetName returns the Name field value
func (o *StorageForCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StorageForCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StorageForCreate) SetName(v string) {
	o.Name = v
}

// GetNodeName returns the NodeName field value
func (o *StorageForCreate) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *StorageForCreate) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *StorageForCreate) SetNodeName(v string) {
	o.NodeName = v
}

// GetPath returns the Path field value
func (o *StorageForCreate) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *StorageForCreate) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *StorageForCreate) SetPath(v string) {
	o.Path = v
}

func (o StorageForCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageForCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["nodeName"] = o.NodeName
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *StorageForCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"nodeName",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageForCreate := _StorageForCreate{}

	err = json.Unmarshal(bytes, &varStorageForCreate)

	if err != nil {
		return err
	}

	*o = StorageForCreate(varStorageForCreate)

	return err
}

type NullableStorageForCreate struct {
	value *StorageForCreate
	isSet bool
}

func (v NullableStorageForCreate) Get() *StorageForCreate {
	return v.value
}

func (v *NullableStorageForCreate) Set(val *StorageForCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageForCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageForCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageForCreate(val *StorageForCreate) *NullableStorageForCreate {
	return &NullableStorageForCreate{value: val, isSet: true}
}

func (v NullableStorageForCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageForCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


