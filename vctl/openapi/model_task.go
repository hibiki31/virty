/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	PostTime *time.Time `json:"postTime,omitempty"`
	RunTime *float32 `json:"runTime,omitempty"`
	StartTime *time.Time `json:"startTime,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	UserId *string `json:"userId,omitempty"`
	Status *string `json:"status,omitempty"`
	Resource *string `json:"resource,omitempty"`
	Object *string `json:"object,omitempty"`
	Method *string `json:"method,omitempty"`
	DependenceUuid *string `json:"dependenceUuid,omitempty"`
	Request map[string]interface{} `json:"request,omitempty"`
	Result map[string]interface{} `json:"result,omitempty"`
	Message *string `json:"message,omitempty"`
	Log *string `json:"log,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetPostTime returns the PostTime field value if set, zero value otherwise.
func (o *Task) GetPostTime() time.Time {
	if o == nil || IsNil(o.PostTime) {
		var ret time.Time
		return ret
	}
	return *o.PostTime
}

// GetPostTimeOk returns a tuple with the PostTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPostTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PostTime) {
		return nil, false
	}
	return o.PostTime, true
}

// HasPostTime returns a boolean if a field has been set.
func (o *Task) HasPostTime() bool {
	if o != nil && !IsNil(o.PostTime) {
		return true
	}

	return false
}

// SetPostTime gets a reference to the given time.Time and assigns it to the PostTime field.
func (o *Task) SetPostTime(v time.Time) {
	o.PostTime = &v
}

// GetRunTime returns the RunTime field value if set, zero value otherwise.
func (o *Task) GetRunTime() float32 {
	if o == nil || IsNil(o.RunTime) {
		var ret float32
		return ret
	}
	return *o.RunTime
}

// GetRunTimeOk returns a tuple with the RunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRunTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.RunTime) {
		return nil, false
	}
	return o.RunTime, true
}

// HasRunTime returns a boolean if a field has been set.
func (o *Task) HasRunTime() bool {
	if o != nil && !IsNil(o.RunTime) {
		return true
	}

	return false
}

// SetRunTime gets a reference to the given float32 and assigns it to the RunTime field.
func (o *Task) SetRunTime(v float32) {
	o.RunTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Task) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Task) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *Task) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Task) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Task) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Task) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Task) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Task) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Task) SetUserId(v string) {
	o.UserId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Task) SetStatus(v string) {
	o.Status = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Task) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Task) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *Task) SetResource(v string) {
	o.Resource = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Task) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Task) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Task) SetObject(v string) {
	o.Object = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Task) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Task) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *Task) SetMethod(v string) {
	o.Method = &v
}

// GetDependenceUuid returns the DependenceUuid field value if set, zero value otherwise.
func (o *Task) GetDependenceUuid() string {
	if o == nil || IsNil(o.DependenceUuid) {
		var ret string
		return ret
	}
	return *o.DependenceUuid
}

// GetDependenceUuidOk returns a tuple with the DependenceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDependenceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DependenceUuid) {
		return nil, false
	}
	return o.DependenceUuid, true
}

// HasDependenceUuid returns a boolean if a field has been set.
func (o *Task) HasDependenceUuid() bool {
	if o != nil && !IsNil(o.DependenceUuid) {
		return true
	}

	return false
}

// SetDependenceUuid gets a reference to the given string and assigns it to the DependenceUuid field.
func (o *Task) SetDependenceUuid(v string) {
	o.DependenceUuid = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *Task) GetRequest() map[string]interface{} {
	if o == nil || IsNil(o.Request) {
		var ret map[string]interface{}
		return ret
	}
	return o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRequestOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Request) {
		return map[string]interface{}{}, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *Task) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given map[string]interface{} and assigns it to the Request field.
func (o *Task) SetRequest(v map[string]interface{}) {
	o.Request = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Task) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Task) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *Task) SetResult(v map[string]interface{}) {
	o.Result = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Task) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Task) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Task) SetMessage(v string) {
	o.Message = &v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *Task) GetLog() string {
	if o == nil || IsNil(o.Log) {
		var ret string
		return ret
	}
	return *o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLogOk() (*string, bool) {
	if o == nil || IsNil(o.Log) {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *Task) HasLog() bool {
	if o != nil && !IsNil(o.Log) {
		return true
	}

	return false
}

// SetLog gets a reference to the given string and assigns it to the Log field.
func (o *Task) SetLog(v string) {
	o.Log = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Task) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Task) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Task) SetUuid(v string) {
	o.Uuid = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostTime) {
		toSerialize["postTime"] = o.PostTime
	}
	if !IsNil(o.RunTime) {
		toSerialize["runTime"] = o.RunTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.DependenceUuid) {
		toSerialize["dependenceUuid"] = o.DependenceUuid
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Log) {
		toSerialize["log"] = o.Log
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


