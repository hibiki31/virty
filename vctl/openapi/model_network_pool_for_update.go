/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkPoolForUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkPoolForUpdate{}

// NetworkPoolForUpdate struct for NetworkPoolForUpdate
type NetworkPoolForUpdate struct {
	PoolId int32 `json:"poolId"`
	NetworkUuid string `json:"networkUuid"`
	PortName *string `json:"portName,omitempty"`
}

type _NetworkPoolForUpdate NetworkPoolForUpdate

// NewNetworkPoolForUpdate instantiates a new NetworkPoolForUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPoolForUpdate(poolId int32, networkUuid string) *NetworkPoolForUpdate {
	this := NetworkPoolForUpdate{}
	this.PoolId = poolId
	this.NetworkUuid = networkUuid
	return &this
}

// NewNetworkPoolForUpdateWithDefaults instantiates a new NetworkPoolForUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPoolForUpdateWithDefaults() *NetworkPoolForUpdate {
	this := NetworkPoolForUpdate{}
	return &this
}

// GetPoolId returns the PoolId field value
func (o *NetworkPoolForUpdate) GetPoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *NetworkPoolForUpdate) GetPoolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *NetworkPoolForUpdate) SetPoolId(v int32) {
	o.PoolId = v
}

// GetNetworkUuid returns the NetworkUuid field value
func (o *NetworkPoolForUpdate) GetNetworkUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkUuid
}

// GetNetworkUuidOk returns a tuple with the NetworkUuid field value
// and a boolean to check if the value has been set.
func (o *NetworkPoolForUpdate) GetNetworkUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkUuid, true
}

// SetNetworkUuid sets field value
func (o *NetworkPoolForUpdate) SetNetworkUuid(v string) {
	o.NetworkUuid = v
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *NetworkPoolForUpdate) GetPortName() string {
	if o == nil || IsNil(o.PortName) {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolForUpdate) GetPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortName) {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *NetworkPoolForUpdate) HasPortName() bool {
	if o != nil && !IsNil(o.PortName) {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *NetworkPoolForUpdate) SetPortName(v string) {
	o.PortName = &v
}

func (o NetworkPoolForUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkPoolForUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["poolId"] = o.PoolId
	toSerialize["networkUuid"] = o.NetworkUuid
	if !IsNil(o.PortName) {
		toSerialize["portName"] = o.PortName
	}
	return toSerialize, nil
}

func (o *NetworkPoolForUpdate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"poolId",
		"networkUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkPoolForUpdate := _NetworkPoolForUpdate{}

	err = json.Unmarshal(bytes, &varNetworkPoolForUpdate)

	if err != nil {
		return err
	}

	*o = NetworkPoolForUpdate(varNetworkPoolForUpdate)

	return err
}

type NullableNetworkPoolForUpdate struct {
	value *NetworkPoolForUpdate
	isSet bool
}

func (v NullableNetworkPoolForUpdate) Get() *NetworkPoolForUpdate {
	return v.value
}

func (v *NullableNetworkPoolForUpdate) Set(val *NetworkPoolForUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPoolForUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPoolForUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPoolForUpdate(val *NetworkPoolForUpdate) *NullableNetworkPoolForUpdate {
	return &NullableNetworkPoolForUpdate{value: val, isSet: true}
}

func (v NullableNetworkPoolForUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPoolForUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


