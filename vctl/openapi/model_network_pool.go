/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NetworkPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkPool{}

// NetworkPool struct for NetworkPool
type NetworkPool struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Networks []NetworkForNetworkPool `json:"networks,omitempty"`
	Ports []NetworkPoolPort `json:"ports,omitempty"`
}

// NewNetworkPool instantiates a new NetworkPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPool() *NetworkPool {
	this := NetworkPool{}
	return &this
}

// NewNetworkPoolWithDefaults instantiates a new NetworkPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPoolWithDefaults() *NetworkPool {
	this := NetworkPool{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkPool) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPool) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkPool) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NetworkPool) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkPool) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPool) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkPool) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkPool) SetName(v string) {
	o.Name = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *NetworkPool) GetNetworks() []NetworkForNetworkPool {
	if o == nil || IsNil(o.Networks) {
		var ret []NetworkForNetworkPool
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPool) GetNetworksOk() ([]NetworkForNetworkPool, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *NetworkPool) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []NetworkForNetworkPool and assigns it to the Networks field.
func (o *NetworkPool) SetNetworks(v []NetworkForNetworkPool) {
	o.Networks = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *NetworkPool) GetPorts() []NetworkPoolPort {
	if o == nil || IsNil(o.Ports) {
		var ret []NetworkPoolPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPool) GetPortsOk() ([]NetworkPoolPort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *NetworkPool) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []NetworkPoolPort and assigns it to the Ports field.
func (o *NetworkPool) SetPorts(v []NetworkPoolPort) {
	o.Ports = v
}

func (o NetworkPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	return toSerialize, nil
}

type NullableNetworkPool struct {
	value *NetworkPool
	isSet bool
}

func (v NullableNetworkPool) Get() *NetworkPool {
	return v.value
}

func (v *NullableNetworkPool) Set(val *NetworkPool) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPool) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPool(val *NetworkPool) *NullableNetworkPool {
	return &NullableNetworkPool{value: val, isSet: true}
}

func (v NullableNetworkPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


