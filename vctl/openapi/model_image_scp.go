/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageSCP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageSCP{}

// ImageSCP struct for ImageSCP
type ImageSCP struct {
	FromNodeName string `json:"fromNodeName"`
	ToNodeName string `json:"toNodeName"`
	FromFilePath string `json:"fromFilePath"`
	ToFilePath string `json:"toFilePath"`
}

type _ImageSCP ImageSCP

// NewImageSCP instantiates a new ImageSCP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageSCP(fromNodeName string, toNodeName string, fromFilePath string, toFilePath string) *ImageSCP {
	this := ImageSCP{}
	this.FromNodeName = fromNodeName
	this.ToNodeName = toNodeName
	this.FromFilePath = fromFilePath
	this.ToFilePath = toFilePath
	return &this
}

// NewImageSCPWithDefaults instantiates a new ImageSCP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageSCPWithDefaults() *ImageSCP {
	this := ImageSCP{}
	return &this
}

// GetFromNodeName returns the FromNodeName field value
func (o *ImageSCP) GetFromNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromNodeName
}

// GetFromNodeNameOk returns a tuple with the FromNodeName field value
// and a boolean to check if the value has been set.
func (o *ImageSCP) GetFromNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromNodeName, true
}

// SetFromNodeName sets field value
func (o *ImageSCP) SetFromNodeName(v string) {
	o.FromNodeName = v
}

// GetToNodeName returns the ToNodeName field value
func (o *ImageSCP) GetToNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToNodeName
}

// GetToNodeNameOk returns a tuple with the ToNodeName field value
// and a boolean to check if the value has been set.
func (o *ImageSCP) GetToNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToNodeName, true
}

// SetToNodeName sets field value
func (o *ImageSCP) SetToNodeName(v string) {
	o.ToNodeName = v
}

// GetFromFilePath returns the FromFilePath field value
func (o *ImageSCP) GetFromFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromFilePath
}

// GetFromFilePathOk returns a tuple with the FromFilePath field value
// and a boolean to check if the value has been set.
func (o *ImageSCP) GetFromFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromFilePath, true
}

// SetFromFilePath sets field value
func (o *ImageSCP) SetFromFilePath(v string) {
	o.FromFilePath = v
}

// GetToFilePath returns the ToFilePath field value
func (o *ImageSCP) GetToFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToFilePath
}

// GetToFilePathOk returns a tuple with the ToFilePath field value
// and a boolean to check if the value has been set.
func (o *ImageSCP) GetToFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToFilePath, true
}

// SetToFilePath sets field value
func (o *ImageSCP) SetToFilePath(v string) {
	o.ToFilePath = v
}

func (o ImageSCP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageSCP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromNodeName"] = o.FromNodeName
	toSerialize["toNodeName"] = o.ToNodeName
	toSerialize["fromFilePath"] = o.FromFilePath
	toSerialize["toFilePath"] = o.ToFilePath
	return toSerialize, nil
}

func (o *ImageSCP) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromNodeName",
		"toNodeName",
		"fromFilePath",
		"toFilePath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageSCP := _ImageSCP{}

	err = json.Unmarshal(bytes, &varImageSCP)

	if err != nil {
		return err
	}

	*o = ImageSCP(varImageSCP)

	return err
}

type NullableImageSCP struct {
	value *ImageSCP
	isSet bool
}

func (v NullableImageSCP) Get() *ImageSCP {
	return v.value
}

func (v *NullableImageSCP) Set(val *ImageSCP) {
	v.value = val
	v.isSet = true
}

func (v NullableImageSCP) IsSet() bool {
	return v.isSet
}

func (v *NullableImageSCP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageSCP(val *ImageSCP) *NullableImageSCP {
	return &NullableImageSCP{value: val, isSet: true}
}

func (v NullableImageSCP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageSCP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


