/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageContainerForStoragePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageContainerForStoragePool{}

// StorageContainerForStoragePool struct for StorageContainerForStoragePool
type StorageContainerForStoragePool struct {
	Storage StorageForStorageContainer `json:"storage"`
}

type _StorageContainerForStoragePool StorageContainerForStoragePool

// NewStorageContainerForStoragePool instantiates a new StorageContainerForStoragePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageContainerForStoragePool(storage StorageForStorageContainer) *StorageContainerForStoragePool {
	this := StorageContainerForStoragePool{}
	this.Storage = storage
	return &this
}

// NewStorageContainerForStoragePoolWithDefaults instantiates a new StorageContainerForStoragePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageContainerForStoragePoolWithDefaults() *StorageContainerForStoragePool {
	this := StorageContainerForStoragePool{}
	return &this
}

// GetStorage returns the Storage field value
func (o *StorageContainerForStoragePool) GetStorage() StorageForStorageContainer {
	if o == nil {
		var ret StorageForStorageContainer
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *StorageContainerForStoragePool) GetStorageOk() (*StorageForStorageContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *StorageContainerForStoragePool) SetStorage(v StorageForStorageContainer) {
	o.Storage = v
}

func (o StorageContainerForStoragePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageContainerForStoragePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storage"] = o.Storage
	return toSerialize, nil
}

func (o *StorageContainerForStoragePool) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageContainerForStoragePool := _StorageContainerForStoragePool{}

	err = json.Unmarshal(bytes, &varStorageContainerForStoragePool)

	if err != nil {
		return err
	}

	*o = StorageContainerForStoragePool(varStorageContainerForStoragePool)

	return err
}

type NullableStorageContainerForStoragePool struct {
	value *StorageContainerForStoragePool
	isSet bool
}

func (v NullableStorageContainerForStoragePool) Get() *StorageContainerForStoragePool {
	return v.value
}

func (v *NullableStorageContainerForStoragePool) Set(val *StorageContainerForStoragePool) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageContainerForStoragePool) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageContainerForStoragePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageContainerForStoragePool(val *StorageContainerForStoragePool) *NullableStorageContainerForStoragePool {
	return &NullableStorageContainerForStoragePool{value: val, isSet: true}
}

func (v NullableStorageContainerForStoragePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageContainerForStoragePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


