/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the FlavorPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorPage{}

// FlavorPage struct for FlavorPage
type FlavorPage struct {
	Name string `json:"name"`
	Os string `json:"os"`
	ManualUrl string `json:"manualUrl"`
	Icon string `json:"icon"`
	CloudInitReady bool `json:"cloudInitReady"`
	Description string `json:"description"`
	Id int32 `json:"id"`
}

type _FlavorPage FlavorPage

// NewFlavorPage instantiates a new FlavorPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorPage(name string, os string, manualUrl string, icon string, cloudInitReady bool, description string, id int32) *FlavorPage {
	this := FlavorPage{}
	this.Name = name
	this.Os = os
	this.ManualUrl = manualUrl
	this.Icon = icon
	this.CloudInitReady = cloudInitReady
	this.Description = description
	this.Id = id
	return &this
}

// NewFlavorPageWithDefaults instantiates a new FlavorPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorPageWithDefaults() *FlavorPage {
	this := FlavorPage{}
	return &this
}

// GetName returns the Name field value
func (o *FlavorPage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FlavorPage) SetName(v string) {
	o.Name = v
}

// GetOs returns the Os field value
func (o *FlavorPage) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *FlavorPage) SetOs(v string) {
	o.Os = v
}

// GetManualUrl returns the ManualUrl field value
func (o *FlavorPage) GetManualUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManualUrl
}

// GetManualUrlOk returns a tuple with the ManualUrl field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetManualUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManualUrl, true
}

// SetManualUrl sets field value
func (o *FlavorPage) SetManualUrl(v string) {
	o.ManualUrl = v
}

// GetIcon returns the Icon field value
func (o *FlavorPage) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *FlavorPage) SetIcon(v string) {
	o.Icon = v
}

// GetCloudInitReady returns the CloudInitReady field value
func (o *FlavorPage) GetCloudInitReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CloudInitReady
}

// GetCloudInitReadyOk returns a tuple with the CloudInitReady field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetCloudInitReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudInitReady, true
}

// SetCloudInitReady sets field value
func (o *FlavorPage) SetCloudInitReady(v bool) {
	o.CloudInitReady = v
}

// GetDescription returns the Description field value
func (o *FlavorPage) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FlavorPage) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *FlavorPage) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlavorPage) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlavorPage) SetId(v int32) {
	o.Id = v
}

func (o FlavorPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["os"] = o.Os
	toSerialize["manualUrl"] = o.ManualUrl
	toSerialize["icon"] = o.Icon
	toSerialize["cloudInitReady"] = o.CloudInitReady
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *FlavorPage) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"os",
		"manualUrl",
		"icon",
		"cloudInitReady",
		"description",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlavorPage := _FlavorPage{}

	err = json.Unmarshal(bytes, &varFlavorPage)

	if err != nil {
		return err
	}

	*o = FlavorPage(varFlavorPage)

	return err
}

type NullableFlavorPage struct {
	value *FlavorPage
	isSet bool
}

func (v NullableFlavorPage) Get() *FlavorPage {
	return v.value
}

func (v *NullableFlavorPage) Set(val *FlavorPage) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorPage) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorPage(val *FlavorPage) *NullableFlavorPage {
	return &NullableFlavorPage{value: val, isSet: true}
}

func (v NullableFlavorPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


