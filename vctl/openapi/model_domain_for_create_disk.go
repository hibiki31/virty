/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DomainForCreateDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainForCreateDisk{}

// DomainForCreateDisk struct for DomainForCreateDisk
type DomainForCreateDisk struct {
	Type string `json:"type"`
	SavePoolUuid string `json:"savePoolUuid"`
	OriginalPoolUuid *string `json:"originalPoolUuid,omitempty"`
	OriginalName *string `json:"originalName,omitempty"`
	SizeGigaByte *int32 `json:"sizeGigaByte,omitempty"`
	TemplateName *string `json:"templateName,omitempty"`
}

type _DomainForCreateDisk DomainForCreateDisk

// NewDomainForCreateDisk instantiates a new DomainForCreateDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainForCreateDisk(type_ string, savePoolUuid string) *DomainForCreateDisk {
	this := DomainForCreateDisk{}
	this.Type = type_
	this.SavePoolUuid = savePoolUuid
	return &this
}

// NewDomainForCreateDiskWithDefaults instantiates a new DomainForCreateDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainForCreateDiskWithDefaults() *DomainForCreateDisk {
	this := DomainForCreateDisk{}
	return &this
}

// GetType returns the Type field value
func (o *DomainForCreateDisk) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DomainForCreateDisk) SetType(v string) {
	o.Type = v
}

// GetSavePoolUuid returns the SavePoolUuid field value
func (o *DomainForCreateDisk) GetSavePoolUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SavePoolUuid
}

// GetSavePoolUuidOk returns a tuple with the SavePoolUuid field value
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetSavePoolUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SavePoolUuid, true
}

// SetSavePoolUuid sets field value
func (o *DomainForCreateDisk) SetSavePoolUuid(v string) {
	o.SavePoolUuid = v
}

// GetOriginalPoolUuid returns the OriginalPoolUuid field value if set, zero value otherwise.
func (o *DomainForCreateDisk) GetOriginalPoolUuid() string {
	if o == nil || IsNil(o.OriginalPoolUuid) {
		var ret string
		return ret
	}
	return *o.OriginalPoolUuid
}

// GetOriginalPoolUuidOk returns a tuple with the OriginalPoolUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetOriginalPoolUuidOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalPoolUuid) {
		return nil, false
	}
	return o.OriginalPoolUuid, true
}

// HasOriginalPoolUuid returns a boolean if a field has been set.
func (o *DomainForCreateDisk) HasOriginalPoolUuid() bool {
	if o != nil && !IsNil(o.OriginalPoolUuid) {
		return true
	}

	return false
}

// SetOriginalPoolUuid gets a reference to the given string and assigns it to the OriginalPoolUuid field.
func (o *DomainForCreateDisk) SetOriginalPoolUuid(v string) {
	o.OriginalPoolUuid = &v
}

// GetOriginalName returns the OriginalName field value if set, zero value otherwise.
func (o *DomainForCreateDisk) GetOriginalName() string {
	if o == nil || IsNil(o.OriginalName) {
		var ret string
		return ret
	}
	return *o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetOriginalNameOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalName) {
		return nil, false
	}
	return o.OriginalName, true
}

// HasOriginalName returns a boolean if a field has been set.
func (o *DomainForCreateDisk) HasOriginalName() bool {
	if o != nil && !IsNil(o.OriginalName) {
		return true
	}

	return false
}

// SetOriginalName gets a reference to the given string and assigns it to the OriginalName field.
func (o *DomainForCreateDisk) SetOriginalName(v string) {
	o.OriginalName = &v
}

// GetSizeGigaByte returns the SizeGigaByte field value if set, zero value otherwise.
func (o *DomainForCreateDisk) GetSizeGigaByte() int32 {
	if o == nil || IsNil(o.SizeGigaByte) {
		var ret int32
		return ret
	}
	return *o.SizeGigaByte
}

// GetSizeGigaByteOk returns a tuple with the SizeGigaByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetSizeGigaByteOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeGigaByte) {
		return nil, false
	}
	return o.SizeGigaByte, true
}

// HasSizeGigaByte returns a boolean if a field has been set.
func (o *DomainForCreateDisk) HasSizeGigaByte() bool {
	if o != nil && !IsNil(o.SizeGigaByte) {
		return true
	}

	return false
}

// SetSizeGigaByte gets a reference to the given int32 and assigns it to the SizeGigaByte field.
func (o *DomainForCreateDisk) SetSizeGigaByte(v int32) {
	o.SizeGigaByte = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *DomainForCreateDisk) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName) {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreateDisk) GetTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateName) {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *DomainForCreateDisk) HasTemplateName() bool {
	if o != nil && !IsNil(o.TemplateName) {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *DomainForCreateDisk) SetTemplateName(v string) {
	o.TemplateName = &v
}

func (o DomainForCreateDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainForCreateDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["savePoolUuid"] = o.SavePoolUuid
	if !IsNil(o.OriginalPoolUuid) {
		toSerialize["originalPoolUuid"] = o.OriginalPoolUuid
	}
	if !IsNil(o.OriginalName) {
		toSerialize["originalName"] = o.OriginalName
	}
	if !IsNil(o.SizeGigaByte) {
		toSerialize["sizeGigaByte"] = o.SizeGigaByte
	}
	if !IsNil(o.TemplateName) {
		toSerialize["templateName"] = o.TemplateName
	}
	return toSerialize, nil
}

func (o *DomainForCreateDisk) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"savePoolUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainForCreateDisk := _DomainForCreateDisk{}

	err = json.Unmarshal(bytes, &varDomainForCreateDisk)

	if err != nil {
		return err
	}

	*o = DomainForCreateDisk(varDomainForCreateDisk)

	return err
}

type NullableDomainForCreateDisk struct {
	value *DomainForCreateDisk
	isSet bool
}

func (v NullableDomainForCreateDisk) Get() *DomainForCreateDisk {
	return v.value
}

func (v *NullableDomainForCreateDisk) Set(val *DomainForCreateDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainForCreateDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainForCreateDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainForCreateDisk(val *DomainForCreateDisk) *NullableDomainForCreateDisk {
	return &NullableDomainForCreateDisk{value: val, isSet: true}
}

func (v NullableDomainForCreateDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainForCreateDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


