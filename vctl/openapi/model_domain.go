/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Domain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Domain{}

// Domain struct for Domain
type Domain struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Core int32 `json:"core"`
	Memory int32 `json:"memory"`
	Status int32 `json:"status"`
	Description *string `json:"description,omitempty"`
	NodeName string `json:"nodeName"`
	OwnerUserId *string `json:"ownerUserId,omitempty"`
	OwnerProjectId *string `json:"ownerProjectId,omitempty"`
	OwnerProject *DomainProject `json:"ownerProject,omitempty"`
	VncPort *int32 `json:"vncPort,omitempty"`
	VncPassword *string `json:"vncPassword,omitempty"`
	Drives []DomainDrive `json:"drives,omitempty"`
	Interfaces []DomainInterface `json:"interfaces,omitempty"`
}

type _Domain Domain

// NewDomain instantiates a new Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomain(uuid string, name string, core int32, memory int32, status int32, nodeName string) *Domain {
	this := Domain{}
	this.Uuid = uuid
	this.Name = name
	this.Core = core
	this.Memory = memory
	this.Status = status
	this.NodeName = nodeName
	return &this
}

// NewDomainWithDefaults instantiates a new Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainWithDefaults() *Domain {
	this := Domain{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Domain) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Domain) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Domain) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *Domain) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Domain) SetName(v string) {
	o.Name = v
}

// GetCore returns the Core field value
func (o *Domain) GetCore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Core
}

// GetCoreOk returns a tuple with the Core field value
// and a boolean to check if the value has been set.
func (o *Domain) GetCoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Core, true
}

// SetCore sets field value
func (o *Domain) SetCore(v int32) {
	o.Core = v
}

// GetMemory returns the Memory field value
func (o *Domain) GetMemory() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *Domain) GetMemoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *Domain) SetMemory(v int32) {
	o.Memory = v
}

// GetStatus returns the Status field value
func (o *Domain) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Domain) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Domain) SetStatus(v int32) {
	o.Status = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Domain) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Domain) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Domain) SetDescription(v string) {
	o.Description = &v
}

// GetNodeName returns the NodeName field value
func (o *Domain) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *Domain) SetNodeName(v string) {
	o.NodeName = v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *Domain) GetOwnerUserId() string {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret string
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetOwnerUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *Domain) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given string and assigns it to the OwnerUserId field.
func (o *Domain) SetOwnerUserId(v string) {
	o.OwnerUserId = &v
}

// GetOwnerProjectId returns the OwnerProjectId field value if set, zero value otherwise.
func (o *Domain) GetOwnerProjectId() string {
	if o == nil || IsNil(o.OwnerProjectId) {
		var ret string
		return ret
	}
	return *o.OwnerProjectId
}

// GetOwnerProjectIdOk returns a tuple with the OwnerProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetOwnerProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerProjectId) {
		return nil, false
	}
	return o.OwnerProjectId, true
}

// HasOwnerProjectId returns a boolean if a field has been set.
func (o *Domain) HasOwnerProjectId() bool {
	if o != nil && !IsNil(o.OwnerProjectId) {
		return true
	}

	return false
}

// SetOwnerProjectId gets a reference to the given string and assigns it to the OwnerProjectId field.
func (o *Domain) SetOwnerProjectId(v string) {
	o.OwnerProjectId = &v
}

// GetOwnerProject returns the OwnerProject field value if set, zero value otherwise.
func (o *Domain) GetOwnerProject() DomainProject {
	if o == nil || IsNil(o.OwnerProject) {
		var ret DomainProject
		return ret
	}
	return *o.OwnerProject
}

// GetOwnerProjectOk returns a tuple with the OwnerProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetOwnerProjectOk() (*DomainProject, bool) {
	if o == nil || IsNil(o.OwnerProject) {
		return nil, false
	}
	return o.OwnerProject, true
}

// HasOwnerProject returns a boolean if a field has been set.
func (o *Domain) HasOwnerProject() bool {
	if o != nil && !IsNil(o.OwnerProject) {
		return true
	}

	return false
}

// SetOwnerProject gets a reference to the given DomainProject and assigns it to the OwnerProject field.
func (o *Domain) SetOwnerProject(v DomainProject) {
	o.OwnerProject = &v
}

// GetVncPort returns the VncPort field value if set, zero value otherwise.
func (o *Domain) GetVncPort() int32 {
	if o == nil || IsNil(o.VncPort) {
		var ret int32
		return ret
	}
	return *o.VncPort
}

// GetVncPortOk returns a tuple with the VncPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetVncPortOk() (*int32, bool) {
	if o == nil || IsNil(o.VncPort) {
		return nil, false
	}
	return o.VncPort, true
}

// HasVncPort returns a boolean if a field has been set.
func (o *Domain) HasVncPort() bool {
	if o != nil && !IsNil(o.VncPort) {
		return true
	}

	return false
}

// SetVncPort gets a reference to the given int32 and assigns it to the VncPort field.
func (o *Domain) SetVncPort(v int32) {
	o.VncPort = &v
}

// GetVncPassword returns the VncPassword field value if set, zero value otherwise.
func (o *Domain) GetVncPassword() string {
	if o == nil || IsNil(o.VncPassword) {
		var ret string
		return ret
	}
	return *o.VncPassword
}

// GetVncPasswordOk returns a tuple with the VncPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetVncPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.VncPassword) {
		return nil, false
	}
	return o.VncPassword, true
}

// HasVncPassword returns a boolean if a field has been set.
func (o *Domain) HasVncPassword() bool {
	if o != nil && !IsNil(o.VncPassword) {
		return true
	}

	return false
}

// SetVncPassword gets a reference to the given string and assigns it to the VncPassword field.
func (o *Domain) SetVncPassword(v string) {
	o.VncPassword = &v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *Domain) GetDrives() []DomainDrive {
	if o == nil || IsNil(o.Drives) {
		var ret []DomainDrive
		return ret
	}
	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetDrivesOk() ([]DomainDrive, bool) {
	if o == nil || IsNil(o.Drives) {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *Domain) HasDrives() bool {
	if o != nil && !IsNil(o.Drives) {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []DomainDrive and assigns it to the Drives field.
func (o *Domain) SetDrives(v []DomainDrive) {
	o.Drives = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *Domain) GetInterfaces() []DomainInterface {
	if o == nil || IsNil(o.Interfaces) {
		var ret []DomainInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetInterfacesOk() ([]DomainInterface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *Domain) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []DomainInterface and assigns it to the Interfaces field.
func (o *Domain) SetInterfaces(v []DomainInterface) {
	o.Interfaces = v
}

func (o Domain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Domain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["core"] = o.Core
	toSerialize["memory"] = o.Memory
	toSerialize["status"] = o.Status
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["nodeName"] = o.NodeName
	if !IsNil(o.OwnerUserId) {
		toSerialize["ownerUserId"] = o.OwnerUserId
	}
	if !IsNil(o.OwnerProjectId) {
		toSerialize["ownerProjectId"] = o.OwnerProjectId
	}
	if !IsNil(o.OwnerProject) {
		toSerialize["ownerProject"] = o.OwnerProject
	}
	if !IsNil(o.VncPort) {
		toSerialize["vncPort"] = o.VncPort
	}
	if !IsNil(o.VncPassword) {
		toSerialize["vncPassword"] = o.VncPassword
	}
	if !IsNil(o.Drives) {
		toSerialize["drives"] = o.Drives
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	return toSerialize, nil
}

func (o *Domain) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"core",
		"memory",
		"status",
		"nodeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomain := _Domain{}

	err = json.Unmarshal(bytes, &varDomain)

	if err != nil {
		return err
	}

	*o = Domain(varDomain)

	return err
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


