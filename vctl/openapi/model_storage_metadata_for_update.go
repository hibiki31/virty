/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageMetadataForUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageMetadataForUpdate{}

// StorageMetadataForUpdate struct for StorageMetadataForUpdate
type StorageMetadataForUpdate struct {
	Uuid string `json:"uuid"`
	Rool string `json:"rool"`
	Protocol string `json:"protocol"`
	DeviceType string `json:"deviceType"`
}

type _StorageMetadataForUpdate StorageMetadataForUpdate

// NewStorageMetadataForUpdate instantiates a new StorageMetadataForUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageMetadataForUpdate(uuid string, rool string, protocol string, deviceType string) *StorageMetadataForUpdate {
	this := StorageMetadataForUpdate{}
	this.Uuid = uuid
	this.Rool = rool
	this.Protocol = protocol
	this.DeviceType = deviceType
	return &this
}

// NewStorageMetadataForUpdateWithDefaults instantiates a new StorageMetadataForUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageMetadataForUpdateWithDefaults() *StorageMetadataForUpdate {
	this := StorageMetadataForUpdate{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *StorageMetadataForUpdate) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *StorageMetadataForUpdate) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *StorageMetadataForUpdate) SetUuid(v string) {
	o.Uuid = v
}

// GetRool returns the Rool field value
func (o *StorageMetadataForUpdate) GetRool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rool
}

// GetRoolOk returns a tuple with the Rool field value
// and a boolean to check if the value has been set.
func (o *StorageMetadataForUpdate) GetRoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rool, true
}

// SetRool sets field value
func (o *StorageMetadataForUpdate) SetRool(v string) {
	o.Rool = v
}

// GetProtocol returns the Protocol field value
func (o *StorageMetadataForUpdate) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *StorageMetadataForUpdate) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *StorageMetadataForUpdate) SetProtocol(v string) {
	o.Protocol = v
}

// GetDeviceType returns the DeviceType field value
func (o *StorageMetadataForUpdate) GetDeviceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *StorageMetadataForUpdate) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *StorageMetadataForUpdate) SetDeviceType(v string) {
	o.DeviceType = v
}

func (o StorageMetadataForUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageMetadataForUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["rool"] = o.Rool
	toSerialize["protocol"] = o.Protocol
	toSerialize["deviceType"] = o.DeviceType
	return toSerialize, nil
}

func (o *StorageMetadataForUpdate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"rool",
		"protocol",
		"deviceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageMetadataForUpdate := _StorageMetadataForUpdate{}

	err = json.Unmarshal(bytes, &varStorageMetadataForUpdate)

	if err != nil {
		return err
	}

	*o = StorageMetadataForUpdate(varStorageMetadataForUpdate)

	return err
}

type NullableStorageMetadataForUpdate struct {
	value *StorageMetadataForUpdate
	isSet bool
}

func (v NullableStorageMetadataForUpdate) Get() *StorageMetadataForUpdate {
	return v.value
}

func (v *NullableStorageMetadataForUpdate) Set(val *StorageMetadataForUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageMetadataForUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageMetadataForUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageMetadataForUpdate(val *StorageMetadataForUpdate) *NullableStorageMetadataForUpdate {
	return &NullableStorageMetadataForUpdate{value: val, isSet: true}
}

func (v NullableStorageMetadataForUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageMetadataForUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


