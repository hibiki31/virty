/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network{}

// Network struct for Network
type Network struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
	Type string `json:"type"`
	Dhcp *bool `json:"dhcp,omitempty"`
	Description *string `json:"description,omitempty"`
	Active *bool `json:"active,omitempty"`
	Bridge *string `json:"bridge,omitempty"`
	AutoStart *bool `json:"autoStart,omitempty"`
	Portgroups []NetworkPortgroup `json:"portgroups"`
	NodeName string `json:"nodeName"`
	UpdateToken *string `json:"updateToken,omitempty"`
}

type _Network Network

// NewNetwork instantiates a new Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork(name string, uuid string, type_ string, portgroups []NetworkPortgroup, nodeName string) *Network {
	this := Network{}
	this.Name = name
	this.Uuid = uuid
	this.Type = type_
	this.Portgroups = portgroups
	this.NodeName = nodeName
	return &this
}

// NewNetworkWithDefaults instantiates a new Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkWithDefaults() *Network {
	this := Network{}
	return &this
}

// GetName returns the Name field value
func (o *Network) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Network) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Network) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *Network) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Network) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Network) SetUuid(v string) {
	o.Uuid = v
}

// GetType returns the Type field value
func (o *Network) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Network) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Network) SetType(v string) {
	o.Type = v
}

// GetDhcp returns the Dhcp field value if set, zero value otherwise.
func (o *Network) GetDhcp() bool {
	if o == nil || IsNil(o.Dhcp) {
		var ret bool
		return ret
	}
	return *o.Dhcp
}

// GetDhcpOk returns a tuple with the Dhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.Dhcp) {
		return nil, false
	}
	return o.Dhcp, true
}

// HasDhcp returns a boolean if a field has been set.
func (o *Network) HasDhcp() bool {
	if o != nil && !IsNil(o.Dhcp) {
		return true
	}

	return false
}

// SetDhcp gets a reference to the given bool and assigns it to the Dhcp field.
func (o *Network) SetDhcp(v bool) {
	o.Dhcp = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Network) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Network) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Network) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Network) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Network) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Network) SetActive(v bool) {
	o.Active = &v
}

// GetBridge returns the Bridge field value if set, zero value otherwise.
func (o *Network) GetBridge() string {
	if o == nil || IsNil(o.Bridge) {
		var ret string
		return ret
	}
	return *o.Bridge
}

// GetBridgeOk returns a tuple with the Bridge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetBridgeOk() (*string, bool) {
	if o == nil || IsNil(o.Bridge) {
		return nil, false
	}
	return o.Bridge, true
}

// HasBridge returns a boolean if a field has been set.
func (o *Network) HasBridge() bool {
	if o != nil && !IsNil(o.Bridge) {
		return true
	}

	return false
}

// SetBridge gets a reference to the given string and assigns it to the Bridge field.
func (o *Network) SetBridge(v string) {
	o.Bridge = &v
}

// GetAutoStart returns the AutoStart field value if set, zero value otherwise.
func (o *Network) GetAutoStart() bool {
	if o == nil || IsNil(o.AutoStart) {
		var ret bool
		return ret
	}
	return *o.AutoStart
}

// GetAutoStartOk returns a tuple with the AutoStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetAutoStartOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoStart) {
		return nil, false
	}
	return o.AutoStart, true
}

// HasAutoStart returns a boolean if a field has been set.
func (o *Network) HasAutoStart() bool {
	if o != nil && !IsNil(o.AutoStart) {
		return true
	}

	return false
}

// SetAutoStart gets a reference to the given bool and assigns it to the AutoStart field.
func (o *Network) SetAutoStart(v bool) {
	o.AutoStart = &v
}

// GetPortgroups returns the Portgroups field value
func (o *Network) GetPortgroups() []NetworkPortgroup {
	if o == nil {
		var ret []NetworkPortgroup
		return ret
	}

	return o.Portgroups
}

// GetPortgroupsOk returns a tuple with the Portgroups field value
// and a boolean to check if the value has been set.
func (o *Network) GetPortgroupsOk() ([]NetworkPortgroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Portgroups, true
}

// SetPortgroups sets field value
func (o *Network) SetPortgroups(v []NetworkPortgroup) {
	o.Portgroups = v
}

// GetNodeName returns the NodeName field value
func (o *Network) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *Network) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *Network) SetNodeName(v string) {
	o.NodeName = v
}

// GetUpdateToken returns the UpdateToken field value if set, zero value otherwise.
func (o *Network) GetUpdateToken() string {
	if o == nil || IsNil(o.UpdateToken) {
		var ret string
		return ret
	}
	return *o.UpdateToken
}

// GetUpdateTokenOk returns a tuple with the UpdateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetUpdateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateToken) {
		return nil, false
	}
	return o.UpdateToken, true
}

// HasUpdateToken returns a boolean if a field has been set.
func (o *Network) HasUpdateToken() bool {
	if o != nil && !IsNil(o.UpdateToken) {
		return true
	}

	return false
}

// SetUpdateToken gets a reference to the given string and assigns it to the UpdateToken field.
func (o *Network) SetUpdateToken(v string) {
	o.UpdateToken = &v
}

func (o Network) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	toSerialize["type"] = o.Type
	if !IsNil(o.Dhcp) {
		toSerialize["dhcp"] = o.Dhcp
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Bridge) {
		toSerialize["bridge"] = o.Bridge
	}
	if !IsNil(o.AutoStart) {
		toSerialize["autoStart"] = o.AutoStart
	}
	toSerialize["portgroups"] = o.Portgroups
	toSerialize["nodeName"] = o.NodeName
	if !IsNil(o.UpdateToken) {
		toSerialize["updateToken"] = o.UpdateToken
	}
	return toSerialize, nil
}

func (o *Network) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
		"type",
		"portgroups",
		"nodeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetwork := _Network{}

	err = json.Unmarshal(bytes, &varNetwork)

	if err != nil {
		return err
	}

	*o = Network(varNetwork)

	return err
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


