/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DomainForCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainForCreate{}

// DomainForCreate struct for DomainForCreate
type DomainForCreate struct {
	Type string `json:"type"`
	Name string `json:"name"`
	NodeName string `json:"nodeName"`
	MemoryMegaByte int32 `json:"memoryMegaByte"`
	Cpu int32 `json:"cpu"`
	Disks []DomainForCreateDisk `json:"disks"`
	Interface []DomainForCreateInterface `json:"interface"`
	CloudInit *CloudInitInsert `json:"cloudInit,omitempty"`
}

type _DomainForCreate DomainForCreate

// NewDomainForCreate instantiates a new DomainForCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainForCreate(type_ string, name string, nodeName string, memoryMegaByte int32, cpu int32, disks []DomainForCreateDisk, interface_ []DomainForCreateInterface) *DomainForCreate {
	this := DomainForCreate{}
	this.Type = type_
	this.Name = name
	this.NodeName = nodeName
	this.MemoryMegaByte = memoryMegaByte
	this.Cpu = cpu
	this.Disks = disks
	this.Interface = interface_
	return &this
}

// NewDomainForCreateWithDefaults instantiates a new DomainForCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainForCreateWithDefaults() *DomainForCreate {
	this := DomainForCreate{}
	return &this
}

// GetType returns the Type field value
func (o *DomainForCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DomainForCreate) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *DomainForCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DomainForCreate) SetName(v string) {
	o.Name = v
}

// GetNodeName returns the NodeName field value
func (o *DomainForCreate) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *DomainForCreate) SetNodeName(v string) {
	o.NodeName = v
}

// GetMemoryMegaByte returns the MemoryMegaByte field value
func (o *DomainForCreate) GetMemoryMegaByte() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryMegaByte
}

// GetMemoryMegaByteOk returns a tuple with the MemoryMegaByte field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetMemoryMegaByteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMegaByte, true
}

// SetMemoryMegaByte sets field value
func (o *DomainForCreate) SetMemoryMegaByte(v int32) {
	o.MemoryMegaByte = v
}

// GetCpu returns the Cpu field value
func (o *DomainForCreate) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *DomainForCreate) SetCpu(v int32) {
	o.Cpu = v
}

// GetDisks returns the Disks field value
func (o *DomainForCreate) GetDisks() []DomainForCreateDisk {
	if o == nil {
		var ret []DomainForCreateDisk
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetDisksOk() ([]DomainForCreateDisk, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *DomainForCreate) SetDisks(v []DomainForCreateDisk) {
	o.Disks = v
}

// GetInterface returns the Interface field value
func (o *DomainForCreate) GetInterface() []DomainForCreateInterface {
	if o == nil {
		var ret []DomainForCreateInterface
		return ret
	}

	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetInterfaceOk() ([]DomainForCreateInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interface, true
}

// SetInterface sets field value
func (o *DomainForCreate) SetInterface(v []DomainForCreateInterface) {
	o.Interface = v
}

// GetCloudInit returns the CloudInit field value if set, zero value otherwise.
func (o *DomainForCreate) GetCloudInit() CloudInitInsert {
	if o == nil || IsNil(o.CloudInit) {
		var ret CloudInitInsert
		return ret
	}
	return *o.CloudInit
}

// GetCloudInitOk returns a tuple with the CloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainForCreate) GetCloudInitOk() (*CloudInitInsert, bool) {
	if o == nil || IsNil(o.CloudInit) {
		return nil, false
	}
	return o.CloudInit, true
}

// HasCloudInit returns a boolean if a field has been set.
func (o *DomainForCreate) HasCloudInit() bool {
	if o != nil && !IsNil(o.CloudInit) {
		return true
	}

	return false
}

// SetCloudInit gets a reference to the given CloudInitInsert and assigns it to the CloudInit field.
func (o *DomainForCreate) SetCloudInit(v CloudInitInsert) {
	o.CloudInit = &v
}

func (o DomainForCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainForCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["nodeName"] = o.NodeName
	toSerialize["memoryMegaByte"] = o.MemoryMegaByte
	toSerialize["cpu"] = o.Cpu
	toSerialize["disks"] = o.Disks
	toSerialize["interface"] = o.Interface
	if !IsNil(o.CloudInit) {
		toSerialize["cloudInit"] = o.CloudInit
	}
	return toSerialize, nil
}

func (o *DomainForCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"nodeName",
		"memoryMegaByte",
		"cpu",
		"disks",
		"interface",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainForCreate := _DomainForCreate{}

	err = json.Unmarshal(bytes, &varDomainForCreate)

	if err != nil {
		return err
	}

	*o = DomainForCreate(varDomainForCreate)

	return err
}

type NullableDomainForCreate struct {
	value *DomainForCreate
	isSet bool
}

func (v NullableDomainForCreate) Get() *DomainForCreate {
	return v.value
}

func (v *NullableDomainForCreate) Set(val *DomainForCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainForCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainForCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainForCreate(val *DomainForCreate) *NullableDomainForCreate {
	return &NullableDomainForCreate{value: val, isSet: true}
}

func (v NullableDomainForCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainForCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


