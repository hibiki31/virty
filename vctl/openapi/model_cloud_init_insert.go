/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudInitInsert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudInitInsert{}

// CloudInitInsert struct for CloudInitInsert
type CloudInitInsert struct {
	Hostname string `json:"hostname"`
	UserData string `json:"userData"`
}

type _CloudInitInsert CloudInitInsert

// NewCloudInitInsert instantiates a new CloudInitInsert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudInitInsert(hostname string, userData string) *CloudInitInsert {
	this := CloudInitInsert{}
	this.Hostname = hostname
	this.UserData = userData
	return &this
}

// NewCloudInitInsertWithDefaults instantiates a new CloudInitInsert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudInitInsertWithDefaults() *CloudInitInsert {
	this := CloudInitInsert{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *CloudInitInsert) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *CloudInitInsert) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *CloudInitInsert) SetHostname(v string) {
	o.Hostname = v
}

// GetUserData returns the UserData field value
func (o *CloudInitInsert) GetUserData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
func (o *CloudInitInsert) GetUserDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserData, true
}

// SetUserData sets field value
func (o *CloudInitInsert) SetUserData(v string) {
	o.UserData = v
}

func (o CloudInitInsert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudInitInsert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostname"] = o.Hostname
	toSerialize["userData"] = o.UserData
	return toSerialize, nil
}

func (o *CloudInitInsert) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostname",
		"userData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudInitInsert := _CloudInitInsert{}

	err = json.Unmarshal(bytes, &varCloudInitInsert)

	if err != nil {
		return err
	}

	*o = CloudInitInsert(varCloudInitInsert)

	return err
}

type NullableCloudInitInsert struct {
	value *CloudInitInsert
	isSet bool
}

func (v NullableCloudInitInsert) Get() *CloudInitInsert {
	return v.value
}

func (v *NullableCloudInitInsert) Set(val *CloudInitInsert) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInitInsert) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInitInsert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInitInsert(val *CloudInitInsert) *NullableCloudInitInsert {
	return &NullableCloudInitInsert{value: val, isSet: true}
}

func (v NullableCloudInitInsert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInitInsert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


