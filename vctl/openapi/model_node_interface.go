/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NodeInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInterface{}

// NodeInterface struct for NodeInterface
type NodeInterface struct {
	Ifname string `json:"ifname"`
	Operstate string `json:"operstate"`
	Mtu int32 `json:"mtu"`
	Master *string `json:"master,omitempty"`
	LinkType string `json:"linkType"`
	MacAddress *string `json:"macAddress,omitempty"`
	Ipv4Info []NodeInterfaceIpv4Info `json:"ipv4Info"`
	Ipv6Info []NodeInterfaceIpv6Info `json:"ipv6Info"`
}

type _NodeInterface NodeInterface

// NewNodeInterface instantiates a new NodeInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInterface(ifname string, operstate string, mtu int32, linkType string, ipv4Info []NodeInterfaceIpv4Info, ipv6Info []NodeInterfaceIpv6Info) *NodeInterface {
	this := NodeInterface{}
	this.Ifname = ifname
	this.Operstate = operstate
	this.Mtu = mtu
	this.LinkType = linkType
	this.Ipv4Info = ipv4Info
	this.Ipv6Info = ipv6Info
	return &this
}

// NewNodeInterfaceWithDefaults instantiates a new NodeInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInterfaceWithDefaults() *NodeInterface {
	this := NodeInterface{}
	return &this
}

// GetIfname returns the Ifname field value
func (o *NodeInterface) GetIfname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ifname
}

// GetIfnameOk returns a tuple with the Ifname field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetIfnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ifname, true
}

// SetIfname sets field value
func (o *NodeInterface) SetIfname(v string) {
	o.Ifname = v
}

// GetOperstate returns the Operstate field value
func (o *NodeInterface) GetOperstate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operstate
}

// GetOperstateOk returns a tuple with the Operstate field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetOperstateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operstate, true
}

// SetOperstate sets field value
func (o *NodeInterface) SetOperstate(v string) {
	o.Operstate = v
}

// GetMtu returns the Mtu field value
func (o *NodeInterface) GetMtu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mtu, true
}

// SetMtu sets field value
func (o *NodeInterface) SetMtu(v int32) {
	o.Mtu = v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *NodeInterface) GetMaster() string {
	if o == nil || IsNil(o.Master) {
		var ret string
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetMasterOk() (*string, bool) {
	if o == nil || IsNil(o.Master) {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *NodeInterface) HasMaster() bool {
	if o != nil && !IsNil(o.Master) {
		return true
	}

	return false
}

// SetMaster gets a reference to the given string and assigns it to the Master field.
func (o *NodeInterface) SetMaster(v string) {
	o.Master = &v
}

// GetLinkType returns the LinkType field value
func (o *NodeInterface) GetLinkType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkType, true
}

// SetLinkType sets field value
func (o *NodeInterface) SetLinkType(v string) {
	o.LinkType = v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NodeInterface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NodeInterface) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NodeInterface) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetIpv4Info returns the Ipv4Info field value
func (o *NodeInterface) GetIpv4Info() []NodeInterfaceIpv4Info {
	if o == nil {
		var ret []NodeInterfaceIpv4Info
		return ret
	}

	return o.Ipv4Info
}

// GetIpv4InfoOk returns a tuple with the Ipv4Info field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetIpv4InfoOk() ([]NodeInterfaceIpv4Info, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv4Info, true
}

// SetIpv4Info sets field value
func (o *NodeInterface) SetIpv4Info(v []NodeInterfaceIpv4Info) {
	o.Ipv4Info = v
}

// GetIpv6Info returns the Ipv6Info field value
func (o *NodeInterface) GetIpv6Info() []NodeInterfaceIpv6Info {
	if o == nil {
		var ret []NodeInterfaceIpv6Info
		return ret
	}

	return o.Ipv6Info
}

// GetIpv6InfoOk returns a tuple with the Ipv6Info field value
// and a boolean to check if the value has been set.
func (o *NodeInterface) GetIpv6InfoOk() ([]NodeInterfaceIpv6Info, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6Info, true
}

// SetIpv6Info sets field value
func (o *NodeInterface) SetIpv6Info(v []NodeInterfaceIpv6Info) {
	o.Ipv6Info = v
}

func (o NodeInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ifname"] = o.Ifname
	toSerialize["operstate"] = o.Operstate
	toSerialize["mtu"] = o.Mtu
	if !IsNil(o.Master) {
		toSerialize["master"] = o.Master
	}
	toSerialize["linkType"] = o.LinkType
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	toSerialize["ipv4Info"] = o.Ipv4Info
	toSerialize["ipv6Info"] = o.Ipv6Info
	return toSerialize, nil
}

func (o *NodeInterface) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ifname",
		"operstate",
		"mtu",
		"linkType",
		"ipv4Info",
		"ipv6Info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeInterface := _NodeInterface{}

	err = json.Unmarshal(bytes, &varNodeInterface)

	if err != nil {
		return err
	}

	*o = NodeInterface(varNodeInterface)

	return err
}

type NullableNodeInterface struct {
	value *NodeInterface
	isSet bool
}

func (v NullableNodeInterface) Get() *NodeInterface {
	return v.value
}

func (v *NullableNodeInterface) Set(val *NodeInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInterface(val *NodeInterface) *NullableNodeInterface {
	return &NullableNodeInterface{value: val, isSet: true}
}

func (v NullableNodeInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


