/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkOVSForCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkOVSForCreate{}

// NetworkOVSForCreate struct for NetworkOVSForCreate
type NetworkOVSForCreate struct {
	Default bool `json:"default"`
	Name string `json:"name"`
	VlanId *int32 `json:"vlanId,omitempty"`
}

type _NetworkOVSForCreate NetworkOVSForCreate

// NewNetworkOVSForCreate instantiates a new NetworkOVSForCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkOVSForCreate(default_ bool, name string) *NetworkOVSForCreate {
	this := NetworkOVSForCreate{}
	this.Default = default_
	this.Name = name
	return &this
}

// NewNetworkOVSForCreateWithDefaults instantiates a new NetworkOVSForCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkOVSForCreateWithDefaults() *NetworkOVSForCreate {
	this := NetworkOVSForCreate{}
	return &this
}

// GetDefault returns the Default field value
func (o *NetworkOVSForCreate) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *NetworkOVSForCreate) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *NetworkOVSForCreate) SetDefault(v bool) {
	o.Default = v
}

// GetName returns the Name field value
func (o *NetworkOVSForCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkOVSForCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkOVSForCreate) SetName(v string) {
	o.Name = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *NetworkOVSForCreate) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkOVSForCreate) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *NetworkOVSForCreate) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *NetworkOVSForCreate) SetVlanId(v int32) {
	o.VlanId = &v
}

func (o NetworkOVSForCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkOVSForCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default"] = o.Default
	toSerialize["name"] = o.Name
	if !IsNil(o.VlanId) {
		toSerialize["vlanId"] = o.VlanId
	}
	return toSerialize, nil
}

func (o *NetworkOVSForCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkOVSForCreate := _NetworkOVSForCreate{}

	err = json.Unmarshal(bytes, &varNetworkOVSForCreate)

	if err != nil {
		return err
	}

	*o = NetworkOVSForCreate(varNetworkOVSForCreate)

	return err
}

type NullableNetworkOVSForCreate struct {
	value *NetworkOVSForCreate
	isSet bool
}

func (v NullableNetworkOVSForCreate) Get() *NetworkOVSForCreate {
	return v.value
}

func (v *NullableNetworkOVSForCreate) Set(val *NetworkOVSForCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkOVSForCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkOVSForCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkOVSForCreate(val *NetworkOVSForCreate) *NullableNetworkOVSForCreate {
	return &NullableNetworkOVSForCreate{value: val, isSet: true}
}

func (v NullableNetworkOVSForCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkOVSForCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


