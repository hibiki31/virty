/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageDomain{}

// ImageDomain struct for ImageDomain
type ImageDomain struct {
	OwnerUserId *string `json:"ownerUserId,omitempty"`
	IssuanceId *int32 `json:"issuanceId,omitempty"`
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

type _ImageDomain ImageDomain

// NewImageDomain instantiates a new ImageDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageDomain(name string, uuid string) *ImageDomain {
	this := ImageDomain{}
	this.Name = name
	this.Uuid = uuid
	return &this
}

// NewImageDomainWithDefaults instantiates a new ImageDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageDomainWithDefaults() *ImageDomain {
	this := ImageDomain{}
	return &this
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *ImageDomain) GetOwnerUserId() string {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret string
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageDomain) GetOwnerUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *ImageDomain) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given string and assigns it to the OwnerUserId field.
func (o *ImageDomain) SetOwnerUserId(v string) {
	o.OwnerUserId = &v
}

// GetIssuanceId returns the IssuanceId field value if set, zero value otherwise.
func (o *ImageDomain) GetIssuanceId() int32 {
	if o == nil || IsNil(o.IssuanceId) {
		var ret int32
		return ret
	}
	return *o.IssuanceId
}

// GetIssuanceIdOk returns a tuple with the IssuanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageDomain) GetIssuanceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IssuanceId) {
		return nil, false
	}
	return o.IssuanceId, true
}

// HasIssuanceId returns a boolean if a field has been set.
func (o *ImageDomain) HasIssuanceId() bool {
	if o != nil && !IsNil(o.IssuanceId) {
		return true
	}

	return false
}

// SetIssuanceId gets a reference to the given int32 and assigns it to the IssuanceId field.
func (o *ImageDomain) SetIssuanceId(v int32) {
	o.IssuanceId = &v
}

// GetName returns the Name field value
func (o *ImageDomain) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImageDomain) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImageDomain) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *ImageDomain) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ImageDomain) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ImageDomain) SetUuid(v string) {
	o.Uuid = v
}

func (o ImageDomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OwnerUserId) {
		toSerialize["ownerUserId"] = o.OwnerUserId
	}
	if !IsNil(o.IssuanceId) {
		toSerialize["issuanceId"] = o.IssuanceId
	}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *ImageDomain) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageDomain := _ImageDomain{}

	err = json.Unmarshal(bytes, &varImageDomain)

	if err != nil {
		return err
	}

	*o = ImageDomain(varImageDomain)

	return err
}

type NullableImageDomain struct {
	value *ImageDomain
	isSet bool
}

func (v NullableImageDomain) Get() *ImageDomain {
	return v.value
}

func (v *NullableImageDomain) Set(val *ImageDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableImageDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableImageDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageDomain(val *ImageDomain) *NullableImageDomain {
	return &NullableImageDomain{value: val, isSet: true}
}

func (v NullableImageDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


