/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkForNetworkPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkForNetworkPool{}

// NetworkForNetworkPool struct for NetworkForNetworkPool
type NetworkForNetworkPool struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
	NodeName string `json:"nodeName"`
	Bridge string `json:"bridge"`
	Type string `json:"type"`
}

type _NetworkForNetworkPool NetworkForNetworkPool

// NewNetworkForNetworkPool instantiates a new NetworkForNetworkPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkForNetworkPool(name string, uuid string, nodeName string, bridge string, type_ string) *NetworkForNetworkPool {
	this := NetworkForNetworkPool{}
	this.Name = name
	this.Uuid = uuid
	this.NodeName = nodeName
	this.Bridge = bridge
	this.Type = type_
	return &this
}

// NewNetworkForNetworkPoolWithDefaults instantiates a new NetworkForNetworkPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkForNetworkPoolWithDefaults() *NetworkForNetworkPool {
	this := NetworkForNetworkPool{}
	return &this
}

// GetName returns the Name field value
func (o *NetworkForNetworkPool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkForNetworkPool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkForNetworkPool) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *NetworkForNetworkPool) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NetworkForNetworkPool) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NetworkForNetworkPool) SetUuid(v string) {
	o.Uuid = v
}

// GetNodeName returns the NodeName field value
func (o *NetworkForNetworkPool) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *NetworkForNetworkPool) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *NetworkForNetworkPool) SetNodeName(v string) {
	o.NodeName = v
}

// GetBridge returns the Bridge field value
func (o *NetworkForNetworkPool) GetBridge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bridge
}

// GetBridgeOk returns a tuple with the Bridge field value
// and a boolean to check if the value has been set.
func (o *NetworkForNetworkPool) GetBridgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bridge, true
}

// SetBridge sets field value
func (o *NetworkForNetworkPool) SetBridge(v string) {
	o.Bridge = v
}

// GetType returns the Type field value
func (o *NetworkForNetworkPool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NetworkForNetworkPool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NetworkForNetworkPool) SetType(v string) {
	o.Type = v
}

func (o NetworkForNetworkPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkForNetworkPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	toSerialize["nodeName"] = o.NodeName
	toSerialize["bridge"] = o.Bridge
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *NetworkForNetworkPool) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
		"nodeName",
		"bridge",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkForNetworkPool := _NetworkForNetworkPool{}

	err = json.Unmarshal(bytes, &varNetworkForNetworkPool)

	if err != nil {
		return err
	}

	*o = NetworkForNetworkPool(varNetworkForNetworkPool)

	return err
}

type NullableNetworkForNetworkPool struct {
	value *NetworkForNetworkPool
	isSet bool
}

func (v NullableNetworkForNetworkPool) Get() *NetworkForNetworkPool {
	return v.value
}

func (v *NullableNetworkForNetworkPool) Set(val *NetworkForNetworkPool) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkForNetworkPool) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkForNetworkPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkForNetworkPool(val *NetworkForNetworkPool) *NullableNetworkForNetworkPool {
	return &NullableNetworkForNetworkPool{value: val, isSet: true}
}

func (v NullableNetworkForNetworkPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkForNetworkPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


