/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageForUpdateImageFlavor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageForUpdateImageFlavor{}

// ImageForUpdateImageFlavor struct for ImageForUpdateImageFlavor
type ImageForUpdateImageFlavor struct {
	StorageUuid string `json:"storageUuid"`
	Path string `json:"path"`
	NodeName string `json:"nodeName"`
	FlavorId int32 `json:"flavorId"`
}

type _ImageForUpdateImageFlavor ImageForUpdateImageFlavor

// NewImageForUpdateImageFlavor instantiates a new ImageForUpdateImageFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageForUpdateImageFlavor(storageUuid string, path string, nodeName string, flavorId int32) *ImageForUpdateImageFlavor {
	this := ImageForUpdateImageFlavor{}
	this.StorageUuid = storageUuid
	this.Path = path
	this.NodeName = nodeName
	this.FlavorId = flavorId
	return &this
}

// NewImageForUpdateImageFlavorWithDefaults instantiates a new ImageForUpdateImageFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageForUpdateImageFlavorWithDefaults() *ImageForUpdateImageFlavor {
	this := ImageForUpdateImageFlavor{}
	return &this
}

// GetStorageUuid returns the StorageUuid field value
func (o *ImageForUpdateImageFlavor) GetStorageUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageUuid
}

// GetStorageUuidOk returns a tuple with the StorageUuid field value
// and a boolean to check if the value has been set.
func (o *ImageForUpdateImageFlavor) GetStorageUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageUuid, true
}

// SetStorageUuid sets field value
func (o *ImageForUpdateImageFlavor) SetStorageUuid(v string) {
	o.StorageUuid = v
}

// GetPath returns the Path field value
func (o *ImageForUpdateImageFlavor) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ImageForUpdateImageFlavor) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ImageForUpdateImageFlavor) SetPath(v string) {
	o.Path = v
}

// GetNodeName returns the NodeName field value
func (o *ImageForUpdateImageFlavor) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *ImageForUpdateImageFlavor) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *ImageForUpdateImageFlavor) SetNodeName(v string) {
	o.NodeName = v
}

// GetFlavorId returns the FlavorId field value
func (o *ImageForUpdateImageFlavor) GetFlavorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value
// and a boolean to check if the value has been set.
func (o *ImageForUpdateImageFlavor) GetFlavorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlavorId, true
}

// SetFlavorId sets field value
func (o *ImageForUpdateImageFlavor) SetFlavorId(v int32) {
	o.FlavorId = v
}

func (o ImageForUpdateImageFlavor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageForUpdateImageFlavor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageUuid"] = o.StorageUuid
	toSerialize["path"] = o.Path
	toSerialize["nodeName"] = o.NodeName
	toSerialize["flavorId"] = o.FlavorId
	return toSerialize, nil
}

func (o *ImageForUpdateImageFlavor) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageUuid",
		"path",
		"nodeName",
		"flavorId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageForUpdateImageFlavor := _ImageForUpdateImageFlavor{}

	err = json.Unmarshal(bytes, &varImageForUpdateImageFlavor)

	if err != nil {
		return err
	}

	*o = ImageForUpdateImageFlavor(varImageForUpdateImageFlavor)

	return err
}

type NullableImageForUpdateImageFlavor struct {
	value *ImageForUpdateImageFlavor
	isSet bool
}

func (v NullableImageForUpdateImageFlavor) Get() *ImageForUpdateImageFlavor {
	return v.value
}

func (v *NullableImageForUpdateImageFlavor) Set(val *ImageForUpdateImageFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableImageForUpdateImageFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableImageForUpdateImageFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageForUpdateImageFlavor(val *ImageForUpdateImageFlavor) *NullableImageForUpdateImageFlavor {
	return &NullableImageForUpdateImageFlavor{value: val, isSet: true}
}

func (v NullableImageForUpdateImageFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageForUpdateImageFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


