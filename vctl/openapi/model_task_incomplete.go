/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TaskIncomplete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskIncomplete{}

// TaskIncomplete struct for TaskIncomplete
type TaskIncomplete struct {
	Hash string `json:"hash"`
	Count int32 `json:"count"`
	Uuids []string `json:"uuids"`
}

type _TaskIncomplete TaskIncomplete

// NewTaskIncomplete instantiates a new TaskIncomplete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskIncomplete(hash string, count int32, uuids []string) *TaskIncomplete {
	this := TaskIncomplete{}
	this.Hash = hash
	this.Count = count
	this.Uuids = uuids
	return &this
}

// NewTaskIncompleteWithDefaults instantiates a new TaskIncomplete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskIncompleteWithDefaults() *TaskIncomplete {
	this := TaskIncomplete{}
	return &this
}

// GetHash returns the Hash field value
func (o *TaskIncomplete) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *TaskIncomplete) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *TaskIncomplete) SetHash(v string) {
	o.Hash = v
}

// GetCount returns the Count field value
func (o *TaskIncomplete) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TaskIncomplete) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TaskIncomplete) SetCount(v int32) {
	o.Count = v
}

// GetUuids returns the Uuids field value
func (o *TaskIncomplete) GetUuids() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Uuids
}

// GetUuidsOk returns a tuple with the Uuids field value
// and a boolean to check if the value has been set.
func (o *TaskIncomplete) GetUuidsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuids, true
}

// SetUuids sets field value
func (o *TaskIncomplete) SetUuids(v []string) {
	o.Uuids = v
}

func (o TaskIncomplete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskIncomplete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["count"] = o.Count
	toSerialize["uuids"] = o.Uuids
	return toSerialize, nil
}

func (o *TaskIncomplete) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"count",
		"uuids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskIncomplete := _TaskIncomplete{}

	err = json.Unmarshal(bytes, &varTaskIncomplete)

	if err != nil {
		return err
	}

	*o = TaskIncomplete(varTaskIncomplete)

	return err
}

type NullableTaskIncomplete struct {
	value *TaskIncomplete
	isSet bool
}

func (v NullableTaskIncomplete) Get() *TaskIncomplete {
	return v.value
}

func (v *NullableTaskIncomplete) Set(val *TaskIncomplete) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskIncomplete) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskIncomplete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskIncomplete(val *TaskIncomplete) *NullableTaskIncomplete {
	return &NullableTaskIncomplete{value: val, isSet: true}
}

func (v NullableTaskIncomplete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskIncomplete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


