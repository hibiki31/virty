/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPage{}

// UserPage struct for UserPage
type UserPage struct {
	Username string `json:"username"`
	Scopes []UserScope `json:"scopes"`
	Projects []UserProject `json:"projects"`
}

type _UserPage UserPage

// NewUserPage instantiates a new UserPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPage(username string, scopes []UserScope, projects []UserProject) *UserPage {
	this := UserPage{}
	this.Username = username
	this.Scopes = scopes
	this.Projects = projects
	return &this
}

// NewUserPageWithDefaults instantiates a new UserPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPageWithDefaults() *UserPage {
	this := UserPage{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserPage) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserPage) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserPage) SetUsername(v string) {
	o.Username = v
}

// GetScopes returns the Scopes field value
func (o *UserPage) GetScopes() []UserScope {
	if o == nil {
		var ret []UserScope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *UserPage) GetScopesOk() ([]UserScope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *UserPage) SetScopes(v []UserScope) {
	o.Scopes = v
}

// GetProjects returns the Projects field value
func (o *UserPage) GetProjects() []UserProject {
	if o == nil {
		var ret []UserProject
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *UserPage) GetProjectsOk() ([]UserProject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Projects, true
}

// SetProjects sets field value
func (o *UserPage) SetProjects(v []UserProject) {
	o.Projects = v
}

func (o UserPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["scopes"] = o.Scopes
	toSerialize["projects"] = o.Projects
	return toSerialize, nil
}

func (o *UserPage) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"scopes",
		"projects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPage := _UserPage{}

	err = json.Unmarshal(bytes, &varUserPage)

	if err != nil {
		return err
	}

	*o = UserPage(varUserPage)

	return err
}

type NullableUserPage struct {
	value *UserPage
	isSet bool
}

func (v NullableUserPage) Get() *UserPage {
	return v.value
}

func (v *NullableUserPage) Set(val *UserPage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPage(val *UserPage) *NullableUserPage {
	return &NullableUserPage{value: val, isSet: true}
}

func (v NullableUserPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


