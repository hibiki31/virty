/*
VirtyAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NodeInterfaceIpv4Info type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInterfaceIpv4Info{}

// NodeInterfaceIpv4Info struct for NodeInterfaceIpv4Info
type NodeInterfaceIpv4Info struct {
	Address string `json:"address"`
	Prefixlen int32 `json:"prefixlen"`
	Label string `json:"label"`
}

type _NodeInterfaceIpv4Info NodeInterfaceIpv4Info

// NewNodeInterfaceIpv4Info instantiates a new NodeInterfaceIpv4Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInterfaceIpv4Info(address string, prefixlen int32, label string) *NodeInterfaceIpv4Info {
	this := NodeInterfaceIpv4Info{}
	this.Address = address
	this.Prefixlen = prefixlen
	this.Label = label
	return &this
}

// NewNodeInterfaceIpv4InfoWithDefaults instantiates a new NodeInterfaceIpv4Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInterfaceIpv4InfoWithDefaults() *NodeInterfaceIpv4Info {
	this := NodeInterfaceIpv4Info{}
	return &this
}

// GetAddress returns the Address field value
func (o *NodeInterfaceIpv4Info) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NodeInterfaceIpv4Info) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NodeInterfaceIpv4Info) SetAddress(v string) {
	o.Address = v
}

// GetPrefixlen returns the Prefixlen field value
func (o *NodeInterfaceIpv4Info) GetPrefixlen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Prefixlen
}

// GetPrefixlenOk returns a tuple with the Prefixlen field value
// and a boolean to check if the value has been set.
func (o *NodeInterfaceIpv4Info) GetPrefixlenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefixlen, true
}

// SetPrefixlen sets field value
func (o *NodeInterfaceIpv4Info) SetPrefixlen(v int32) {
	o.Prefixlen = v
}

// GetLabel returns the Label field value
func (o *NodeInterfaceIpv4Info) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *NodeInterfaceIpv4Info) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *NodeInterfaceIpv4Info) SetLabel(v string) {
	o.Label = v
}

func (o NodeInterfaceIpv4Info) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInterfaceIpv4Info) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["prefixlen"] = o.Prefixlen
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *NodeInterfaceIpv4Info) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"prefixlen",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeInterfaceIpv4Info := _NodeInterfaceIpv4Info{}

	err = json.Unmarshal(bytes, &varNodeInterfaceIpv4Info)

	if err != nil {
		return err
	}

	*o = NodeInterfaceIpv4Info(varNodeInterfaceIpv4Info)

	return err
}

type NullableNodeInterfaceIpv4Info struct {
	value *NodeInterfaceIpv4Info
	isSet bool
}

func (v NullableNodeInterfaceIpv4Info) Get() *NodeInterfaceIpv4Info {
	return v.value
}

func (v *NullableNodeInterfaceIpv4Info) Set(val *NodeInterfaceIpv4Info) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInterfaceIpv4Info) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInterfaceIpv4Info) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInterfaceIpv4Info(val *NodeInterfaceIpv4Info) *NullableNodeInterfaceIpv4Info {
	return &NullableNodeInterfaceIpv4Info{value: val, isSet: true}
}

func (v NullableNodeInterfaceIpv4Info) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInterfaceIpv4Info) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


