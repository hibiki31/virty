"""empty message

Revision ID: 4a99a45ddab1
Revises: 
Create Date: 2022-03-15 10:29:11.524547

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4a99a45ddab1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flavors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('os', sa.String(), nullable=False),
    sa.Column('manual_url', sa.String(), nullable=False),
    sa.Column('icon', sa.String(), nullable=False),
    sa.Column('cloud_init_ready', sa.Boolean(), nullable=False),
    sa.Column('cloud_init_user', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_flavors_id'), 'flavors', ['id'], unique=False)
    op.create_table('groups',
    sa.Column('id', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_groups_id'), 'groups', ['id'], unique=False)
    op.create_table('networks_pools',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nodes',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('domain', sa.String(), nullable=True),
    sa.Column('user_name', sa.String(), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('core', sa.Integer(), nullable=True),
    sa.Column('memory', sa.Integer(), nullable=True),
    sa.Column('cpu_gen', sa.String(), nullable=True),
    sa.Column('os_like', sa.String(), nullable=True),
    sa.Column('os_name', sa.String(), nullable=True),
    sa.Column('os_version', sa.String(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('qemu_version', sa.String(), nullable=True),
    sa.Column('libvirt_version', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_index(op.f('ix_nodes_name'), 'nodes', ['name'], unique=False)
    op.create_table('nodesrole',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_index(op.f('ix_nodesrole_name'), 'nodesrole', ['name'], unique=False)
    op.create_table('pools_cpu',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storages_pools',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tickets',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('core', sa.Integer(), nullable=False),
    sa.Column('memory', sa.Integer(), nullable=False),
    sa.Column('storage_capacity_g', sa.Integer(), nullable=True),
    sa.Column('user_installable', sa.Boolean(), nullable=False),
    sa.Column('isolated_networks', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tickets_id'), 'tickets', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('association_pools_cpu',
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('node_name', sa.String(), nullable=False),
    sa.Column('core', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['node_name'], ['nodes.name'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pool_id'], ['pools_cpu.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pool_id', 'node_name')
    )
    op.create_table('issuances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('issued_date', sa.DateTime(), nullable=False),
    sa.Column('issued_by', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('ticket_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['issued_by'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_issuances_id'), 'issuances', ['id'], unique=False)
    op.create_table('networks',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('node_name', sa.String(), nullable=True),
    sa.Column('bridge', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('auto_start', sa.Boolean(), nullable=True),
    sa.Column('dhcp', sa.Boolean(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.Column('ip', sa.String(), nullable=True),
    sa.Column('mac', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['node_name'], ['nodes.name'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_networks_uuid'), 'networks', ['uuid'], unique=False)
    op.create_table('node_to_noderole',
    sa.Column('node_name', sa.String(), nullable=True),
    sa.Column('role_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['node_name'], ['nodes.name'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['nodesrole.name'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('storages',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('node_name', sa.String(), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('available', sa.Integer(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('auto_start', sa.Boolean(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['node_name'], ['nodes.name'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_storages_uuid'), 'storages', ['uuid'], unique=False)
    op.create_table('tasks',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('post_time', sa.DateTime(), nullable=True),
    sa.Column('run_time', sa.Float(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('dependence_uuid', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('resource', sa.String(), nullable=True),
    sa.Column('object', sa.String(), nullable=True),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('request', sa.JSON(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['dependence_uuid'], ['tasks.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_tasks_uuid'), 'tasks', ['uuid'], unique=False)
    op.create_table('tickets_to_flavors_pools',
    sa.Column('tickets_id', sa.Integer(), nullable=True),
    sa.Column('flavors_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['flavors_id'], ['flavors.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tickets_id'], ['tickets.id'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('tickets_to_networks_pools',
    sa.Column('tickets_id', sa.Integer(), nullable=True),
    sa.Column('networks_pools_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['networks_pools_id'], ['networks_pools.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tickets_id'], ['tickets.id'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('tickets_to_storages_pools',
    sa.Column('tickets_id', sa.Integer(), nullable=True),
    sa.Column('storages_pools_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['storages_pools_id'], ['storages_pools.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tickets_id'], ['tickets.id'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('users_scope',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'name')
    )
    op.create_table('users_to_groups',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('group_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('associations_networks',
    sa.Column('pool_id', sa.Integer(), nullable=True),
    sa.Column('network_uuid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['network_uuid'], ['networks.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pool_id'], ['networks_pools.id'], onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_table('associations_storages_pools',
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('storage_uuid', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['pool_id'], ['storages_pools.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['storage_uuid'], ['storages.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pool_id', 'storage_uuid')
    )
    op.create_table('domains',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('core', sa.Integer(), nullable=True),
    sa.Column('memory', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.Column('vnc_port', sa.String(), nullable=True),
    sa.Column('vnc_password', sa.String(), nullable=True),
    sa.Column('node_name', sa.String(), nullable=True),
    sa.Column('owner_user_id', sa.String(), nullable=True),
    sa.Column('owner_group_id', sa.String(), nullable=True),
    sa.Column('issuance_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['issuance_id'], ['issuances.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['node_name'], ['nodes.name'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_group_id'], ['groups.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_domains_uuid'), 'domains', ['uuid'], unique=False)
    op.create_table('images',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('storage_uuid', sa.String(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('allocation', sa.Integer(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.Column('flavor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['flavor_id'], ['flavors.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['storage_uuid'], ['storages.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'storage_uuid')
    )
    op.create_table('networks_portgroups',
    sa.Column('network_uuid', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('vlan_id', sa.String(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['network_uuid'], ['networks.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('network_uuid', 'name')
    )
    op.create_table('storages_metadata',
    sa.Column('device_type', sa.String(), nullable=True),
    sa.Column('protocol', sa.String(), nullable=True),
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('rool', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['uuid'], ['storages.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('associations_networks_pools',
    sa.Column('pool_id', sa.Integer(), nullable=True),
    sa.Column('port_network_uuid', sa.String(), nullable=True),
    sa.Column('port_name', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['pool_id'], ['networks_pools.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['port_network_uuid', 'port_name'], ['networks_portgroups.network_uuid', 'networks_portgroups.name'], )
    )
    op.create_table('domains_drives',
    sa.Column('domain_uuid', sa.String(), nullable=False),
    sa.Column('target', sa.String(), nullable=False),
    sa.Column('device', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['domain_uuid'], ['domains.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('domain_uuid', 'target')
    )
    op.create_table('domains_interfaces',
    sa.Column('domain_uuid', sa.String(), nullable=False),
    sa.Column('mac', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('target', sa.String(), nullable=True),
    sa.Column('bridge', sa.String(), nullable=True),
    sa.Column('network', sa.String(), nullable=True),
    sa.Column('port', sa.String(), nullable=True),
    sa.Column('update_token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['domain_uuid'], ['domains.uuid'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('domain_uuid', 'mac')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('domains_interfaces')
    op.drop_table('domains_drives')
    op.drop_table('associations_networks_pools')
    op.drop_table('storages_metadata')
    op.drop_table('networks_portgroups')
    op.drop_table('images')
    op.drop_index(op.f('ix_domains_uuid'), table_name='domains')
    op.drop_table('domains')
    op.drop_table('associations_storages_pools')
    op.drop_table('associations_networks')
    op.drop_table('users_to_groups')
    op.drop_table('users_scope')
    op.drop_table('tickets_to_storages_pools')
    op.drop_table('tickets_to_networks_pools')
    op.drop_table('tickets_to_flavors_pools')
    op.drop_index(op.f('ix_tasks_uuid'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_storages_uuid'), table_name='storages')
    op.drop_table('storages')
    op.drop_table('node_to_noderole')
    op.drop_index(op.f('ix_networks_uuid'), table_name='networks')
    op.drop_table('networks')
    op.drop_index(op.f('ix_issuances_id'), table_name='issuances')
    op.drop_table('issuances')
    op.drop_table('association_pools_cpu')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tickets_id'), table_name='tickets')
    op.drop_table('tickets')
    op.drop_table('storages_pools')
    op.drop_table('pools_cpu')
    op.drop_index(op.f('ix_nodesrole_name'), table_name='nodesrole')
    op.drop_table('nodesrole')
    op.drop_index(op.f('ix_nodes_name'), table_name='nodes')
    op.drop_table('nodes')
    op.drop_table('networks_pools')
    op.drop_index(op.f('ix_groups_id'), table_name='groups')
    op.drop_table('groups')
    op.drop_index(op.f('ix_flavors_id'), table_name='flavors')
    op.drop_table('flavors')
    # ### end Alembic commands ###
