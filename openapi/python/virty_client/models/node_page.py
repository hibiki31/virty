# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from virty_client.models.node_role import NodeRole
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NodePage(BaseModel):
    """
    NodePage
    """ # noqa: E501
    name: StrictStr
    description: StrictStr
    domain: StrictStr
    user_name: StrictStr = Field(alias="userName")
    port: StrictInt
    core: StrictInt
    memory: StrictInt
    cpu_gen: StrictStr = Field(alias="cpuGen")
    os_like: StrictStr = Field(alias="osLike")
    os_name: StrictStr = Field(alias="osName")
    os_version: StrictStr = Field(alias="osVersion")
    status: StrictInt
    qemu_version: Optional[StrictStr] = Field(default=None, alias="qemuVersion")
    libvirt_version: Optional[StrictStr] = Field(default=None, alias="libvirtVersion")
    roles: List[NodeRole]
    __properties: ClassVar[List[str]] = ["name", "description", "domain", "userName", "port", "core", "memory", "cpuGen", "osLike", "osName", "osVersion", "status", "qemuVersion", "libvirtVersion", "roles"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NodePage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NodePage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "userName": obj.get("userName"),
            "port": obj.get("port"),
            "core": obj.get("core"),
            "memory": obj.get("memory"),
            "cpuGen": obj.get("cpuGen"),
            "osLike": obj.get("osLike"),
            "osName": obj.get("osName"),
            "osVersion": obj.get("osVersion"),
            "status": obj.get("status"),
            "qemuVersion": obj.get("qemuVersion"),
            "libvirtVersion": obj.get("libvirtVersion"),
            "roles": [NodeRole.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None
        })
        return _obj


