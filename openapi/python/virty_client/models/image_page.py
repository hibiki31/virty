# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from virty_client.models.flavor import Flavor
from virty_client.models.image_domain import ImageDomain
from virty_client.models.storage_page import StoragePage
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ImagePage(BaseModel):
    """
    ImagePage
    """ # noqa: E501
    name: StrictStr
    storage_uuid: Optional[StrictStr] = Field(default=None, alias="storageUuid")
    capacity: StrictInt
    storage: StoragePage
    flavor: Optional[Flavor] = None
    allocation: StrictInt
    path: StrictStr
    update_token: Optional[StrictStr] = Field(default=None, alias="updateToken")
    domain: Optional[ImageDomain] = None
    __properties: ClassVar[List[str]] = ["name", "storageUuid", "capacity", "storage", "flavor", "allocation", "path", "updateToken", "domain"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ImagePage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flavor
        if self.flavor:
            _dict['flavor'] = self.flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ImagePage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "storageUuid": obj.get("storageUuid"),
            "capacity": obj.get("capacity"),
            "storage": StoragePage.from_dict(obj.get("storage")) if obj.get("storage") is not None else None,
            "flavor": Flavor.from_dict(obj.get("flavor")) if obj.get("flavor") is not None else None,
            "allocation": obj.get("allocation"),
            "path": obj.get("path"),
            "updateToken": obj.get("updateToken"),
            "domain": ImageDomain.from_dict(obj.get("domain")) if obj.get("domain") is not None else None
        })
        return _obj


