# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from virty_client.models.node_page import NodePage
from virty_client.models.storage_metadata import StorageMetadata
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StoragePage(BaseModel):
    """
    StoragePage
    """ # noqa: E501
    name: StrictStr
    uuid: StrictStr
    status: StrictInt
    active: StrictBool
    available: Optional[StrictInt] = None
    capacity: Optional[StrictInt] = None
    node_name: StrictStr = Field(alias="nodeName")
    node: NodePage
    auto_start: StrictBool = Field(alias="autoStart")
    path: Optional[StrictStr] = None
    meta_data: Optional[StorageMetadata] = Field(default=None, alias="metaData")
    update_token: Optional[StrictStr] = Field(default=None, alias="updateToken")
    allocation_commit: Optional[StrictInt] = Field(default=None, alias="allocationCommit")
    capacity_commit: Optional[StrictInt] = Field(default=None, alias="capacityCommit")
    __properties: ClassVar[List[str]] = ["name", "uuid", "status", "active", "available", "capacity", "nodeName", "node", "autoStart", "path", "metaData", "updateToken", "allocationCommit", "capacityCommit"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StoragePage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node
        if self.node:
            _dict['node'] = self.node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_data
        if self.meta_data:
            _dict['metaData'] = self.meta_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StoragePage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "uuid": obj.get("uuid"),
            "status": obj.get("status"),
            "active": obj.get("active"),
            "available": obj.get("available"),
            "capacity": obj.get("capacity"),
            "nodeName": obj.get("nodeName"),
            "node": NodePage.from_dict(obj.get("node")) if obj.get("node") is not None else None,
            "autoStart": obj.get("autoStart"),
            "path": obj.get("path"),
            "metaData": StorageMetadata.from_dict(obj.get("metaData")) if obj.get("metaData") is not None else None,
            "updateToken": obj.get("updateToken"),
            "allocationCommit": obj.get("allocationCommit"),
            "capacityCommit": obj.get("capacityCommit")
        })
        return _obj


