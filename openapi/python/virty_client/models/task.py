# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    post_time: Optional[datetime] = Field(default=None, alias="postTime")
    run_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runTime")
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    update_time: Optional[datetime] = Field(default=None, alias="updateTime")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    status: Optional[StrictStr] = None
    resource: Optional[StrictStr] = None
    object: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    dependence_uuid: Optional[StrictStr] = Field(default=None, alias="dependenceUuid")
    request: Optional[Dict[str, Any]] = None
    result: Optional[Dict[str, Any]] = None
    message: Optional[StrictStr] = None
    log: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["postTime", "runTime", "startTime", "updateTime", "userId", "status", "resource", "object", "method", "dependenceUuid", "request", "result", "message", "log", "uuid"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "postTime": obj.get("postTime"),
            "runTime": obj.get("runTime"),
            "startTime": obj.get("startTime"),
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId"),
            "status": obj.get("status"),
            "resource": obj.get("resource"),
            "object": obj.get("object"),
            "method": obj.get("method"),
            "dependenceUuid": obj.get("dependenceUuid"),
            "request": obj.get("request"),
            "result": obj.get("result"),
            "message": obj.get("message"),
            "log": obj.get("log"),
            "uuid": obj.get("uuid")
        })
        return _obj


