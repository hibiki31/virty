# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from virty_client.models.domain_drive import DomainDrive
from virty_client.models.domain_interface import DomainInterface
from virty_client.models.domain_project import DomainProject
from virty_client.models.node import Node
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DomainDetail(BaseModel):
    """
    DomainDetail
    """ # noqa: E501
    uuid: StrictStr
    name: StrictStr
    core: StrictInt
    memory: StrictInt
    status: StrictInt
    description: Optional[StrictStr] = None
    node_name: StrictStr = Field(alias="nodeName")
    owner_user_id: Optional[StrictStr] = Field(default=None, alias="ownerUserId")
    owner_project_id: Optional[StrictStr] = Field(default=None, alias="ownerProjectId")
    owner_project: Optional[DomainProject] = Field(default=None, alias="ownerProject")
    vnc_port: Optional[StrictInt] = Field(default=None, alias="vncPort")
    vnc_password: Optional[StrictStr] = Field(default=None, alias="vncPassword")
    drives: Optional[List[DomainDrive]] = None
    interfaces: Optional[List[DomainInterface]] = None
    node: Node
    __properties: ClassVar[List[str]] = ["uuid", "name", "core", "memory", "status", "description", "nodeName", "ownerUserId", "ownerProjectId", "ownerProject", "vncPort", "vncPassword", "drives", "interfaces", "node"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DomainDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner_project
        if self.owner_project:
            _dict['ownerProject'] = self.owner_project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in drives (list)
        _items = []
        if self.drives:
            for _item in self.drives:
                if _item:
                    _items.append(_item.to_dict())
            _dict['drives'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interfaces (list)
        _items = []
        if self.interfaces:
            for _item in self.interfaces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of node
        if self.node:
            _dict['node'] = self.node.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DomainDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "core": obj.get("core"),
            "memory": obj.get("memory"),
            "status": obj.get("status"),
            "description": obj.get("description"),
            "nodeName": obj.get("nodeName"),
            "ownerUserId": obj.get("ownerUserId"),
            "ownerProjectId": obj.get("ownerProjectId"),
            "ownerProject": DomainProject.from_dict(obj.get("ownerProject")) if obj.get("ownerProject") is not None else None,
            "vncPort": obj.get("vncPort"),
            "vncPassword": obj.get("vncPassword"),
            "drives": [DomainDrive.from_dict(_item) for _item in obj.get("drives")] if obj.get("drives") is not None else None,
            "interfaces": [DomainInterface.from_dict(_item) for _item in obj.get("interfaces")] if obj.get("interfaces") is not None else None,
            "node": Node.from_dict(obj.get("node")) if obj.get("node") is not None else None
        })
        return _obj


