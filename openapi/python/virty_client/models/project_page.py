# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from virty_client.models.project_user import ProjectUser
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectPage(BaseModel):
    """
    ProjectPage
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    memory_g: StrictInt = Field(alias="memoryG")
    core: StrictInt
    storage_capacity_g: StrictInt = Field(alias="storageCapacityG")
    users: List[ProjectUser]
    used_memory_g: StrictInt = Field(alias="usedMemoryG")
    used_core: StrictInt = Field(alias="usedCore")
    network_pools: Optional[Any] = Field(default=None, alias="networkPools")
    storage_pools: Optional[Any] = Field(default=None, alias="storagePools")
    __properties: ClassVar[List[str]] = ["id", "name", "memoryG", "core", "storageCapacityG", "users", "usedMemoryG", "usedCore", "networkPools", "storagePools"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        # set to None if network_pools (nullable) is None
        # and model_fields_set contains the field
        if self.network_pools is None and "network_pools" in self.model_fields_set:
            _dict['networkPools'] = None

        # set to None if storage_pools (nullable) is None
        # and model_fields_set contains the field
        if self.storage_pools is None and "storage_pools" in self.model_fields_set:
            _dict['storagePools'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "memoryG": obj.get("memoryG"),
            "core": obj.get("core"),
            "storageCapacityG": obj.get("storageCapacityG"),
            "users": [ProjectUser.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None,
            "usedMemoryG": obj.get("usedMemoryG"),
            "usedCore": obj.get("usedCore"),
            "networkPools": obj.get("networkPools"),
            "storagePools": obj.get("storagePools")
        })
        return _obj


