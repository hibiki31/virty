# coding: utf-8

"""
    VirtyAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from virty_client.models.domain_pagenation import DomainPagenation

class TestDomainPagenation(unittest.TestCase):
    """DomainPagenation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainPagenation:
        """Test DomainPagenation
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainPagenation`
        """
        model = DomainPagenation()
        if include_optional:
            return DomainPagenation(
                count = 56,
                data = [
                    virty_client.models.domain.Domain(
                        uuid = '', 
                        name = '', 
                        core = 56, 
                        memory = 56, 
                        status = 56, 
                        description = '', 
                        node_name = '', 
                        owner_user_id = '', 
                        owner_project_id = '', 
                        owner_project = virty_client.models.domain_project.DomainProject(
                            id = '', 
                            name = '', ), 
                        vnc_port = 56, 
                        vnc_password = '', 
                        drives = [
                            virty_client.models.domain_drive.DomainDrive(
                                device = '', 
                                type = '', 
                                source = '', 
                                target = '', )
                            ], 
                        interfaces = [
                            virty_client.models.domain_interface.DomainInterface(
                                type = '', 
                                mac = '', 
                                target = '', 
                                bridge = '', 
                                network = '', 
                                port = '', )
                            ], )
                    ]
            )
        else:
            return DomainPagenation(
                count = 56,
                data = [
                    virty_client.models.domain.Domain(
                        uuid = '', 
                        name = '', 
                        core = 56, 
                        memory = 56, 
                        status = 56, 
                        description = '', 
                        node_name = '', 
                        owner_user_id = '', 
                        owner_project_id = '', 
                        owner_project = virty_client.models.domain_project.DomainProject(
                            id = '', 
                            name = '', ), 
                        vnc_port = 56, 
                        vnc_password = '', 
                        drives = [
                            virty_client.models.domain_drive.DomainDrive(
                                device = '', 
                                type = '', 
                                source = '', 
                                target = '', )
                            ], 
                        interfaces = [
                            virty_client.models.domain_interface.DomainInterface(
                                type = '', 
                                mac = '', 
                                target = '', 
                                bridge = '', 
                                network = '', 
                                port = '', )
                            ], )
                    ],
        )
        """

    def testDomainPagenation(self):
        """Test DomainPagenation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
