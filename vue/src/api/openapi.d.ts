/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tasks */
        get: operations["get_tasks"];
        put?: never;
        post?: never;
        /** Delete Tasks */
        delete: operations["delete_tasks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Incomplete Tasks */
        get: operations["get_incomplete_tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Task */
        get: operations["get_task"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Api Auth Setup */
        post: operations["api_auth_setup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate Token */
        get: operations["validate_token"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Nodes */
        get: operations["get_nodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nodes/key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ssh Key Pair */
        get: operations["get_ssh_key_pair"];
        put?: never;
        /** Create Ssh Key Pair */
        post: operations["create_ssh_key_pair"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nodes/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Node */
        get: operations["get_node"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nodes/{name}/facts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Node Facts */
        get: operations["get_node_facts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nodes/{name}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Node Info */
        get: operations["get_node_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Node */
        post: operations["create_node"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/nodes/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Node */
        delete: operations["delete_node"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/nodes/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Node Role */
        patch: operations["update_node_role"];
        trace?: never;
    };
    "/api/vms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vms */
        get: operations["get_vms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vms/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vm */
        get: operations["get_vm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vms/{uuid}/xml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vm Xml */
        get: operations["get_vm_xml"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vms/vnc/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vnc Address */
        get: operations["get_vnc_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/vms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Refresh Vms */
        put: operations["refresh_vms"];
        /** Create Vm */
        post: operations["create_vm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/vms/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Vm */
        delete: operations["delete_vm"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/vms/{uuid}/power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Vm Power Status */
        patch: operations["update_vm_power_status"];
        trace?: never;
    };
    "/api/tasks/vms/{uuid}/cdrom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Control Vm Cdrom
         * @description umount
         *     - path = null
         *
         *     mount
         *     - path = iso file path
         */
        patch: operations["control_vm_cdrom"];
        trace?: never;
    };
    "/api/tasks/vms/{uuid}/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Vm Project */
        patch: operations["update_vm_project"];
        trace?: never;
    };
    "/api/tasks/vms/{uuid}/network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Vm Network
         * @description **Power off required**
         *
         *     Exception: Cannot switch the OVS while the VM is runningOperation not supported: unable to change config on 'network' network type
         */
        patch: operations["update_vm_network"];
        trace?: never;
    };
    "/api/storages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Storages */
        get: operations["get_storages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Storage Metadata */
        patch: operations["update_storage_metadata"];
        trace?: never;
    };
    "/api/storages/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Storage Pools */
        get: operations["get_storage_pools"];
        put?: never;
        /** Create Storage Pool */
        post: operations["create_storage_pool"];
        delete?: never;
        options?: never;
        head?: never;
        /** Update Storage Pool */
        patch: operations["update_storage_pool"];
        trace?: never;
    };
    "/api/storages/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Storage */
        get: operations["get_storage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/storages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Storage */
        post: operations["create_storage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/storages/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Storage */
        delete: operations["delete_storage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Images */
        get: operations["get_images"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Image Flavor */
        patch: operations["update_image_flavor"];
        trace?: never;
    };
    "/api/tasks/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Refresh Images */
        put: operations["refresh_images"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/images/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Download Image */
        post: operations["download_image"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks */
        get: operations["get_networks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/networks/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Pools */
        get: operations["get_network_pools"];
        put?: never;
        /** Create Network Pool */
        post: operations["create_network_pool"];
        delete?: never;
        options?: never;
        head?: never;
        /** Update Network Pool */
        patch: operations["update_network_pool"];
        trace?: never;
    };
    "/api/networks/pools/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Network Pool */
        delete: operations["delete_network_pool"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/networks/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network */
        get: operations["get_network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/networks/{uuid}/xml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Xml */
        get: operations["get_network_xml"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Refresh Networks */
        put: operations["refresh_networks"];
        /** Create Network */
        post: operations["create_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/networks/{uuid}/ovs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Network Ovs */
        post: operations["create_network_ovs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/networks/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Network Providers */
        post: operations["create_network_providers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/networks/{uuid}/ovs/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Network Ovs */
        delete: operations["delete_network_ovs"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/networks/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Network */
        delete: operations["delete_network"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["get_current_user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users */
        get: operations["get_users"];
        put?: never;
        /** Create User */
        post: operations["create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete User */
        delete: operations["delete_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Projects */
        get: operations["get_projects"];
        /** Update Project */
        put: operations["update_project"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Project */
        post: operations["create_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Project */
        delete: operations["delete_project"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flavors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Flavors */
        get: operations["get_flavors"];
        put?: never;
        /** Create Flavor */
        post: operations["create_flavor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flavors/{flavor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Flavor */
        delete: operations["delete_flavor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Metrics */
        get: operations["get_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Version
         * @description 初期化済みか判定用
         */
        get: operations["get_version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AuthValidateResponse */
        AuthValidateResponse: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
            /** Username */
            username: string;
        };
        /** Body_login */
        Body_login: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /** CdromForUpdateDomain */
        CdromForUpdateDomain: {
            /** Path */
            path?: string | null;
            /** Target */
            target: string;
        };
        /** CloudInitInsert */
        CloudInitInsert: {
            /** Hostname */
            hostname: string;
            /** Userdata */
            userData: string;
        };
        /** Domain */
        Domain: {
            /** Uuid */
            uuid: string;
            /** Name */
            name: string;
            /** Core */
            core: number;
            /** Memory */
            memory: number;
            /** Status */
            status: number;
            /** Description */
            description?: string | null;
            /** Nodename */
            nodeName: string;
            /** Owneruserid */
            ownerUserId?: string | null;
            /** Ownerprojectid */
            ownerProjectId?: string | null;
            ownerProject?: components["schemas"]["DomainProject"] | null;
            /** Vncport */
            vncPort?: number | null;
            /** Vncpassword */
            vncPassword?: string | null;
            /** Drives */
            drives?: components["schemas"]["DomainDrive"][] | null;
            /** Interfaces */
            interfaces?: components["schemas"]["DomainInterface"][] | null;
        };
        /** DomainDetail */
        DomainDetail: {
            /** Uuid */
            uuid: string;
            /** Name */
            name: string;
            /** Core */
            core: number;
            /** Memory */
            memory: number;
            /** Status */
            status: number;
            /** Description */
            description?: string | null;
            /** Nodename */
            nodeName: string;
            /** Owneruserid */
            ownerUserId?: string | null;
            /** Ownerprojectid */
            ownerProjectId?: string | null;
            ownerProject?: components["schemas"]["DomainProject"] | null;
            /** Vncport */
            vncPort?: number | null;
            /** Vncpassword */
            vncPassword?: string | null;
            /** Drives */
            drives?: components["schemas"]["DomainDrive"][] | null;
            /** Interfaces */
            interfaces?: components["schemas"]["DomainInterface"][] | null;
            node: components["schemas"]["Node"];
        };
        /** DomainDrive */
        DomainDrive: {
            /** Device */
            device?: string | null;
            /** Type */
            type?: string | null;
            /** Source */
            source?: string | null;
            /** Target */
            target?: string | null;
        };
        /** DomainForCreate */
        DomainForCreate: {
            /**
             * Type
             * @enum {string}
             */
            type: "manual" | "project";
            /** Name */
            name: string;
            /** Nodename */
            nodeName: string;
            /** Memorymegabyte */
            memoryMegaByte: number;
            /** Cpu */
            cpu: number;
            /** Disks */
            disks: components["schemas"]["DomainForCreateDisk"][];
            /** Interface */
            interface: components["schemas"]["DomainForCreateInterface"][];
            cloudInit?: components["schemas"]["CloudInitInsert"] | null;
        };
        /** DomainForCreateDisk */
        DomainForCreateDisk: {
            /** Type */
            type: string;
            /** Savepooluuid */
            savePoolUuid: string;
            /** Originalpooluuid */
            originalPoolUuid?: string | null;
            /** Originalname */
            originalName?: string | null;
            /** Sizegigabyte */
            sizeGigaByte?: number | null;
            /** Templatename */
            templateName?: string | null;
        };
        /** DomainForCreateInterface */
        DomainForCreateInterface: {
            /** Type */
            type: string;
            /** Mac */
            mac?: string | null;
            /** Networkuuid */
            networkUuid: string;
            /** Port */
            port?: string | null;
        };
        /** DomainInterface */
        DomainInterface: {
            /** Type */
            type?: string | null;
            /** Mac */
            mac?: string | null;
            /** Target */
            target?: string | null;
            /** Bridge */
            bridge?: string | null;
            /** Network */
            network?: string | null;
            /** Port */
            port?: string | null;
        };
        /** DomainPage */
        DomainPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Domain"][];
        };
        /** DomainProject */
        DomainProject: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /** DomainProjectForUpdate */
        DomainProjectForUpdate: {
            /** Uuid */
            uuid: string;
            /** Projectid */
            projectId: string;
        };
        /** DomainXML */
        DomainXML: {
            /** Xml */
            xml: string;
        };
        /** Flavor */
        Flavor: {
            /** Name */
            name: string;
            /** Os */
            os: string;
            /** Manualurl */
            manualUrl: string;
            /** Icon */
            icon: string;
            /** Cloudinitready */
            cloudInitReady: boolean;
            /** Description */
            description: string;
            /** Id */
            id: number;
        };
        /** FlavorForCreate */
        FlavorForCreate: {
            /** Name */
            name: string;
            /** Os */
            os: string;
            /** Manualurl */
            manualUrl: string;
            /** Icon */
            icon: string;
            /** Cloudinitready */
            cloudInitReady: boolean;
            /** Description */
            description: string;
        };
        /** FlavorPage */
        FlavorPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Flavor"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Image */
        Image: {
            /** Name */
            name: string;
            /** Storageuuid */
            storageUuid?: string | null;
            /** Capacity */
            capacity: number;
            storage: components["schemas"]["Storage"];
            flavor?: components["schemas"]["Flavor"] | null;
            /** Allocation */
            allocation: number;
            /** Path */
            path: string;
            /** Updatetoken */
            updateToken?: string | null;
            domain?: components["schemas"]["ImageDomain"] | null;
        };
        /** ImageDomain */
        ImageDomain: {
            /** Owneruserid */
            ownerUserId?: string | null;
            /** Issuanceid */
            issuanceId?: number | null;
            /** Name */
            name: string;
            /** Uuid */
            uuid: string;
        };
        /** ImageDownloadForCreate */
        ImageDownloadForCreate: {
            /** Storageuuid */
            storageUuid: string;
            /** Imageurl */
            imageUrl: string;
        };
        /** ImageForUpdateImageFlavor */
        ImageForUpdateImageFlavor: {
            /** Storageuuid */
            storageUuid: string;
            /** Path */
            path: string;
            /** Nodename */
            nodeName: string;
            /** Flavorid */
            flavorId: number;
        };
        /** ImagePage */
        ImagePage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Image"][];
        };
        /** Network */
        Network: {
            /** Name */
            name: string;
            /** Uuid */
            uuid: string;
            /** Type */
            type: string;
            /** Dhcp */
            dhcp?: boolean | null;
            /** Description */
            description?: string | null;
            /** Active */
            active?: boolean | null;
            /** Bridge */
            bridge?: string | null;
            /** Autostart */
            autoStart?: boolean | null;
            /** Portgroups */
            portgroups: components["schemas"]["NetworkPortgroup"][];
            /** Nodename */
            nodeName: string;
            /** Updatetoken */
            updateToken?: string | null;
        };
        /** NetworkDHCPForCreate */
        NetworkDHCPForCreate: {
            /**
             * Start
             * Format: ipvanyaddress
             */
            start: string;
            /**
             * End
             * Format: ipvanyaddress
             */
            end: string;
        };
        /** NetworkForCreate */
        NetworkForCreate: {
            /** Name */
            name: string;
            /** Nodename */
            nodeName: string;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Forwardmode
             * @enum {string}
             */
            forwardMode: "bridge" | "ovs" | "nat" | "route" | "isorated";
            /** Bridgename */
            bridgeName?: string | null;
            dhcp?: components["schemas"]["NetworkDHCPForCreate"] | null;
            ip?: components["schemas"]["NetworkIPForCreate"] | null;
        };
        /** NetworkForNetworkPool */
        NetworkForNetworkPool: {
            /** Name */
            name: string;
            /** Uuid */
            uuid: string;
            /** Nodename */
            nodeName: string;
            /** Bridge */
            bridge: string;
            /** Type */
            type: string;
        };
        /** NetworkForUpdateDomain */
        NetworkForUpdateDomain: {
            /** Mac */
            mac: string;
            /** Networkuuid */
            networkUuid: string;
            /** Port */
            port?: string | null;
        };
        /** NetworkIPForCreate */
        NetworkIPForCreate: {
            /**
             * Address
             * Format: ipvanyaddress
             */
            address: string;
            /**
             * Netmask
             * Format: ipvanyaddress
             */
            netmask: string;
        };
        /** NetworkOVSForCreate */
        NetworkOVSForCreate: {
            /** Default */
            default: boolean;
            /** Name */
            name: string;
            /** Vlanid */
            vlanId?: number | null;
        };
        /** NetworkPage */
        NetworkPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Network"][];
        };
        /** NetworkPool */
        NetworkPool: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
            /** Networks */
            networks?: components["schemas"]["NetworkForNetworkPool"][] | null;
            /** Ports */
            ports?: components["schemas"]["NetworkPoolPort"][] | null;
        };
        /** NetworkPoolForCreate */
        NetworkPoolForCreate: {
            /** Name */
            name: string;
        };
        /** NetworkPoolForUpdate */
        NetworkPoolForUpdate: {
            /** Poolid */
            poolId: number;
            /** Networkuuid */
            networkUuid: string;
            /** Portname */
            portName?: string | null;
        };
        /** NetworkPoolPort */
        NetworkPoolPort: {
            /** Name */
            name?: string;
            /** Vlanid */
            vlanId?: number | null;
            network: components["schemas"]["NetworkForNetworkPool"];
        };
        /** NetworkPortgroup */
        NetworkPortgroup: {
            /** Name */
            name: string;
            /** Vlanid */
            vlanId?: string | null;
            /** Isdefault */
            isDefault: boolean;
        };
        /** NetworkProviderForCreate */
        NetworkProviderForCreate: {
            /** Name */
            name?: string | null;
            /** Dnsdomain */
            dnsDomain?: string | null;
            /** Networkaddress */
            networkAddress?: string | null;
            /** Networkprefix */
            networkPrefix?: string | null;
            /** Gatewayaddress */
            gatewayAddress?: string | null;
            /** Dhcpstart */
            dhcpStart?: string | null;
            /** Dhcpend */
            dhcpEnd?: string | null;
            /** Networknode */
            networkNode?: string | null;
        };
        /** NetworkXML */
        NetworkXML: {
            /** Xml */
            xml: string;
        };
        /** Node */
        Node: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Domain */
            domain: string;
            /** Username */
            userName: string;
            /** Port */
            port: number;
            /** Core */
            core: number;
            /** Memory */
            memory: number;
            /** Cpugen */
            cpuGen: string;
            /** Oslike */
            osLike: string;
            /** Osname */
            osName: string;
            /** Osversion */
            osVersion: string;
            /** Status */
            status: number;
            /** Qemuversion */
            qemuVersion?: string | null;
            /** Libvirtversion */
            libvirtVersion?: string | null;
            /** Roles */
            roles: components["schemas"]["NodeRole"][];
        };
        /** NodeForCreate */
        NodeForCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Domain */
            domain: string;
            /** Username */
            userName: string;
            /** Port */
            port: number;
            /** Libvirtrole */
            libvirtRole: boolean;
        };
        /** NodeInfo */
        NodeInfo: {
            /** Ipaddress */
            ipAddress: string;
            /** Iproute */
            ipRoute: string;
            /** Ipneigh */
            ipNeigh: string;
            /** Dfh */
            dfH: string;
            /** Lsblk */
            lsblk: string;
            /** Uptime */
            uptime: string;
            /** Free */
            free: string;
            /** Top */
            top: string;
            /** Iptables */
            iptables: string;
            /** Iptablesnat */
            iptablesNat: string;
            /** Netplanget */
            netplanGet: string;
        };
        /** NodePage */
        NodePage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Node"][];
        };
        /** NodeRole */
        NodeRole: {
            /** Rolename */
            roleName: string;
            /** Extrajson */
            extraJson?: {
                [key: string]: unknown;
            } | null;
        };
        /** NodeRoleForUpdate */
        NodeRoleForUpdate: {
            /** Nodename */
            nodeName: string;
            /** Rolename */
            roleName: string;
            /** Extrajson */
            extraJson?: {
                [key: string]: unknown;
            } | null;
        };
        /** PowerStatusForUpdateDomain */
        PowerStatusForUpdateDomain: {
            /** Status */
            status?: string | null;
        };
        /** Project */
        Project: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Memoryg */
            memoryG: number;
            /** Core */
            core: number;
            /** Storagecapacityg */
            storageCapacityG: number;
            /** Users */
            users: components["schemas"]["ProjectUser"][];
            /** Usedmemoryg */
            usedMemoryG: number;
            /** Usedcore */
            usedCore: number;
            /** Networkpools */
            networkPools: unknown;
            /** Storagepools */
            storagePools: unknown;
        };
        /** ProjectForCreate */
        ProjectForCreate: {
            /** Projectname */
            projectName: string;
            /** Userids */
            userIds: string[];
        };
        /** ProjectForUpdate */
        ProjectForUpdate: {
            /** Projectid */
            projectId: string;
            /** Userid */
            userId: string;
        };
        /** ProjectPage */
        ProjectPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Project"][];
        };
        /** ProjectUser */
        ProjectUser: {
            /** Username */
            username: string;
        };
        /** SSHKeyPair */
        SSHKeyPair: {
            /** Privatekey */
            privateKey?: string | null;
            /** Publickey */
            publicKey?: string | null;
            /** Generate */
            generate?: boolean | null;
        };
        /** SSHPublicKey */
        SSHPublicKey: {
            /** Publickey */
            publicKey: string;
        };
        /** SetupRequest */
        SetupRequest: {
            /** Username */
            username: string;
            /** Password */
            password: string;
        };
        /** Storage */
        Storage: {
            /** Name */
            name: string;
            /** Uuid */
            uuid: string;
            /** Status */
            status: number;
            /** Active */
            active: boolean;
            /** Available */
            available: number;
            /** Capacity */
            capacity: number;
            /** Nodename */
            nodeName: string;
            node: components["schemas"]["Node"];
            /** Autostart */
            autoStart: boolean;
            /** Path */
            path?: string | null;
            metaData?: components["schemas"]["StorageMetadata"] | null;
            /** Updatetoken */
            updateToken?: string | null;
            /**
             * Allocationcommit
             * @default 0
             */
            allocationCommit: number | null;
            /**
             * Capacitycommit
             * @default 0
             */
            capacityCommit: number | null;
        };
        /** StorageContainerForStoragePool */
        StorageContainerForStoragePool: {
            storage: components["schemas"]["StorageForStorageContainer"];
        };
        /** StorageForCreate */
        StorageForCreate: {
            /** Name */
            name: string;
            /** Nodename */
            nodeName: string;
            /** Path */
            path: string;
        };
        /** StorageForStorageContainer */
        StorageForStorageContainer: {
            /** Name */
            name: string;
            /** Uuid */
            uuid: string;
            /** Nodename */
            nodeName: string;
        };
        /** StorageMetadata */
        StorageMetadata: {
            /** Rool */
            rool?: string | null;
            /** Protocol */
            protocol?: string | null;
            /** Devicetype */
            deviceType?: string | null;
        };
        /** StorageMetadataForUpdate */
        StorageMetadataForUpdate: {
            /** Uuid */
            uuid: string;
            /** Rool */
            rool: string;
            /** Protocol */
            protocol: string;
            /** Devicetype */
            deviceType: string;
        };
        /** StoragePage */
        StoragePage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Storage"][];
        };
        /** StoragePool */
        StoragePool: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Storages */
            storages: components["schemas"]["StorageContainerForStoragePool"][];
        };
        /** StoragePoolForCreate */
        StoragePoolForCreate: {
            /** Name */
            name: string;
            /** Storageuuids */
            storageUuids: string[];
        };
        /** StoragePoolForUpdate */
        StoragePoolForUpdate: {
            /** Id */
            id: string;
            /** Storageuuids */
            storageUuids: string[];
        };
        /** Task */
        Task: {
            /** Posttime */
            postTime?: string | null;
            /** Runtime */
            runTime?: number | null;
            /** Starttime */
            startTime?: string | null;
            /** Updatetime */
            updateTime?: string | null;
            /** Userid */
            userId?: string | null;
            /** Status */
            status?: string | null;
            /** Resource */
            resource: string;
            /** Object */
            object: string;
            /** Method */
            method: string;
            /** Dependenceuuid */
            dependenceUuid?: string | null;
            /** Request */
            request?: unknown | null;
            /** Result */
            result?: {
                [key: string]: unknown;
            } | null;
            /** Message */
            message?: string | null;
            /** Log */
            log?: string | null;
            /** Uuid */
            uuid?: string | null;
        };
        /** TaskIncomplete */
        TaskIncomplete: {
            /** Hash */
            hash: string;
            /** Count */
            count: number;
            /** Uuids */
            uuids: string[];
        };
        /** TaskPage */
        TaskPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["Task"][];
        };
        /** TokenData */
        TokenData: {
            /** Id */
            id?: string | null;
            /**
             * Scopes
             * @default []
             */
            scopes: string[];
            /**
             * Role
             * @default []
             */
            role: string[];
        };
        /** TokenRFC6749Response */
        TokenRFC6749Response: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** User */
        User: {
            /** Username */
            username: string;
            /** Scopes */
            scopes: components["schemas"]["UserScope"][];
            /** Projects */
            projects: components["schemas"]["UserProject"][];
        };
        /** UserForCreate */
        UserForCreate: {
            /** Username */
            username: string;
            /** Password */
            password: string;
        };
        /** UserPage */
        UserPage: {
            /** Count */
            count: number;
            /** Data */
            data: components["schemas"]["User"][];
        };
        /** UserProject */
        UserProject: {
            /** Name */
            name: string;
        };
        /** UserResponse */
        UserResponse: {
            /** Username */
            username: string;
        };
        /** UserScope */
        UserScope: {
            /** Name */
            name: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Version */
        Version: {
            /** Initialized */
            initialized: boolean;
            /** Version */
            version: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_tasks: {
        parameters: {
            query?: {
                admin?: boolean;
                limit?: number;
                page?: number;
                resource?: string | null;
                object?: string | null;
                method?: string | null;
                status?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    get_incomplete_tasks: {
        parameters: {
            query?: {
                referenceHash?: string | null;
                admin?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskIncomplete"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_auth_setup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetupRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRFC6749Response"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthValidateResponse"];
                };
            };
        };
    };
    get_nodes: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodePage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ssh_key_pair: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSHPublicKey"];
                };
            };
        };
    };
    create_ssh_key_pair: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SSHKeyPair"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_node: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Node"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_node_facts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_node_info: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_node: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NodeForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_node: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_node_role: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeRoleForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vms: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
                nodeNameLike?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vm_xml: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainXML"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vnc_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_vms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    create_vm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DomainForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vm_power_status: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PowerStatusForUpdateDomain"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    control_vm_cdrom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CdromForUpdateDomain"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vm_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainProjectForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vm_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NetworkForUpdateDomain"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_storages: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
                nodeName?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_storage_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StorageMetadataForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_storage_pools: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePool"][];
                };
            };
        };
    };
    create_storage_pool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePoolForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_storage_pool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePoolForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_storage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_storage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StorageForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_storage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_images: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nodeName?: string | null;
                poolUuid?: string | null;
                name?: string | null;
                nameLike?: string | null;
                rool?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImagePage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_image_flavor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageForUpdateImageFlavor"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_images: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    download_image: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageDownloadForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_networks: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
                nodeNameLike?: string | null;
                type?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_network_pools: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkPool"][];
                };
            };
        };
    };
    create_network_pool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkPoolForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_network_pool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkPoolForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_network_pool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Network"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_network_xml: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkXML"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_networks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    create_network: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NetworkForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_network_ovs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NetworkOVSForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_network_providers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NetworkProviderForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_network_ovs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenData"];
                };
            };
        };
    };
    get_users: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_projects: {
        parameters: {
            query?: {
                admin?: boolean;
                limit?: number;
                page?: number;
                nameLike?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectForUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_project: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flavors: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                admin?: boolean;
                nameLike?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlavorPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_flavor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlavorForCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_flavor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                flavor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flavor"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    get_version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Version"];
                };
            };
        };
    };
}
